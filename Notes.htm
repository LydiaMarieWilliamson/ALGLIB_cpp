<html>
<head>
<title>ALGLIB++ Supplementary Sections</title>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<style type="text/css">
h1		{ font-family: Arial, Helvetica, sans-serif; color: #000000; font-size: 36pt; margin-top: 0; margin-bottom: 0; }
h2		{ font-family: Arial, Helvetica, sans-serif; color: #003300; font-size: 20pt; margin-bottom: 0; }
h3		{ font-family: Arial, Helvetica, sans-serif; color: #006600; font-size: 15pt; margin-bottom: 0; }
h4		{ font-family: Arial, Helvetica, sans-serif; color: #666600; font-size: 14pt; margin-bottom: 0; }
h5		{ font-family: Arial, Helvetica, sans-serif; color: #660000; font-size: 14pt; margin-top: 10pt; margin-bottom: 0; }
h6		{ font-family: Arial, Helvetica, sans-serif; color: #000066; font-size: 13pt; margin-top: 10pt; margin-bottom: 0; }
sheader		{ }
.inlineheader	{ background-color: #e8e8e8; padding: 0.1em; font-weight: bold; }
.pagecontent	{ font-family: Verdana, Arial, sans-serif; font-size: 10pt; text-align: justify; }
.pageheader	{ width: 50em; }
.source		{ font-family: "Courier New"; font-size: 1.0em; margin-top: 0; margin-bottom: 0; }
.narration	{ font-family: "Courier New"; font-size: 1.0em; margin-top: 0; margin-bottom: 0; color: navy; }
.declaration	{ font-family: "Courier New"; font-size: 1.0em; margin-top: 0; margin-bottom: 0; color: blue; }
code		{ font-family: "Courier New"; font-size: 1.0em; }
.p_example	{ margin-left: 4em; font-family: "Courier New"; font-size: 1.0em; }
.p_note		{ margin-left: 10%; margin-right: 10%; font-size: 80%; }
.p_att		{ margin-left: 10%; margin-right: 10%; color: red; font-weight: bold; }
.p_code_head	{ margin-left: 5%; margin-top: 0; margin-bottom: 0; padding: 5px; width: 90%; font-family: "Courier New", monospace; background-color: #aaaaaa; font-weight: bold; color: white; }
.p_code_body	{ margin-left: 5%; margin-top: 0; margin-bottom: 0; padding: 5px; width: 90%; font-family: "Courier New", monospace; background-color: #f0f0f0; }
.p_code		{ margin-left: 5%; margin-top: 0; margin-bottom: 0; padding: 5px; width: 90%; font-family: "Courier New", monospace; background-color: #f0f0f0; }
.s_code		{ font-family: "Courier New"; background-color: #f0f0f0; }
.s_str		{ font-family: "Courier New"; color: blue; font-weight: bold; }
.s_comment	{ color: navy; font-style: italic; }
.s_preprocessor	{ color: green; }
a		{ color: #000077; text-decoration: underline; }
a:link		{ color: #0000ff; text-decoration: underline; }
a:visited	{ color: #000077; text-decoration: underline; }
a:active	{ color: #6666ff; text-decoration: underline; }
a:hover		{ color: #ff6666; text-decoration: underline; }
a.toc		{ color: #000077; text-decoration: none; }
a.toc:link	{ color: #0000ff; text-decoration: none; }
a.toc:visited	{ color: #000077; text-decoration: none; }
a.toc:active	{ color: #6666ff; text-decoration: none; }
a.toc:hover	{ color: #ff6666; text-decoration: none; }
a.nav		{ color: #000077; font-weight: bold; text-decoration: none; }
a.nav:link	{ color: #0000ff; font-weight: bold; text-decoration: none; }
a.nav:visited	{ color: #000077; font-weight: bold; text-decoration: none; }
a.nav:active	{ color: #6666ff; font-weight: bold; text-decoration: none; }
a.nav:hover	{ color: #ff6666; font-weight: bold; text-decoration: none; }
.cond		{ color: blue; }
.const		{ color: #222222; }
.func		{ color: #111111; }
</style>
</head>
<body>
<div class=pagecontent>
<p>
<h1>ALGLIB++ Supplementary Notes</h1>
Additional notes on the implementation and revisions of ALGLIB++.
This is a supplement to the <a href="Manual.htm">ALGLIB++ Reference Manual</a>.
</p>
<p>
<font size=2>[
<a href=#supp_CppDemoModule>C++ Demo Module</a> |
<a href=#supp_DemoFile>ALGLIB++ Demo</a> |
<a href=#supp_Classes>ALGLIB++ Object Classes</a> |
<a href=#supp_Links>ALGLIB++ Package Dependencies</a> |
<a href=#supp_Commercial>ALGLIB Commercial Version: Notes</a> |
<a href=#supp_History>ALGLIB &rArr; ALGLIB++ Revision Sequence</a>
]</font>
</p>
<p>
<a name=supp_CppDemoModule class=sheader></a><h2>A1. C++ Demo Module</h2>
ALGLIB++ is an intermediate stage between ALGLIB and the future library undergoing development, with only minimal recoding (but this will change, soon).
A reengineered, refactored, re-commented version is currently undergoing testing, but has not yet been released.
We intend to roll back much of the Version 3 infrastructure, to something similar to Version 2, and move upwards from there.
We are still experimenting with different methods for re-encapsulating the ALGLIB/ALGLIB++ classes.
A demonstration may be found under the <a href="New/">New/</a> directory.
If running under the configuration Linux:X86:GCC, run "make test" in the New/ directory.
Other configurations have not been tested, but this should be suitable for a POSIX system; you may need to experiment a bit.
</p>
<p>
<a name=supp_DemoFile class=sheader></a><h2>A2. ALGLIB++ Demo</h2>
An implementation of the demo program cited in <a href="Manual.htm#gs_compile_examples">Section 4.4</a> of the ALGLIB Reference Manual for the configuration Linux:x86_64:GCC may be found under the <a href="Demo/">Demo/</a> directory.
If running under this configuration, run ./Test.sh under Demo/.
Again, for other configurations, you will need to do some experimentation to find what works.
</p>
<p>
<a name=supp_Classes class=sheader></a><h2>A3. ALGLIB++ Object Classes</h2>
<font size=2>[
<a href=#supp_ObjClassMac>Object Class Macros</a> |
<a href=#supp_ObjClassDef>Defining Object Classes</a>
]</font>
</p>
<p>
<a name=supp_ObjClassMac class=sheader></a><h3>A3.1. Object Class Macros</h3>
For some of the types given in the C (<code>alglib_impl::</code>) namespace; in the C++ (<code>alglib::</code>) namespace, object classes are:
<ul>
<li>defined in a *.cpp file by <code>DefClass(Type, Vars)</code></li>
<li>declared in the corresponding *.h file by <code>DecClass(Type, Pars)</code></li>
</ul>
Object classes are defined in the C++ (<code>alglib::</code>) namespace of a *.cpp file, for some of the types given in the C (<code>alglib_impl::</code>) namespace, by <code>DefClass(Type, Vars)</code>.
</p>
<p>
<u>Examples:</u>
<pre class=p_example>
   DefClass(hqrndstate, )
   DecClass(hqrndstate, );
<span class=s_comment>// define/declare the object class alglib::hqrndstate for the type alglib_impl::hqrndstate, with no public members.</span>
   DefClass(xdebugrecord1, DecVal(i) DecComplex(c) DecVar(a))
   DecClass(xdebugrecord1, ae_int_t &amp;i; complex &amp;c; real_1d_array a;);
<span class=s_comment>// define/declare the object class alglib::xdebugrecord1 for the type alglib_impl::xdebugrecord, with the data members i, c and a made public.</span>
</pre>
In <code>DefClass()</code>, public members match those of the same name declared in the <code>alglib_impl</code> Type, with the macros:
<ul>
<li><code>DecComplex(X)</code>, for members X of type <code>alglib_impl::ae_complex</code>;</li>
<li><code>DecVal(X)</code>, for all other members X of scalar types (i.e., <code>bool</code>, <code>alglib_impl::ae_int_t</code> or <code>double</code>);</li>
<li><code>DecVar(X)</code>, for non-scalar members (in particular: {integer,real}_{1,2}d_array).</li>
</ul>
In <code>DecClass()</code>, public members are declared as:
<ul>
<li><code>alglib::complex &amp;X</code>, for members X of type <code>alglib_impl::ae_complex</code>;</li>
<li><code>alglib::ae_int_t &amp;X</code>, for members X of type <code>alglib_impl::ae_int_t</code>;</li>
<li><code>alglib::T &amp;X</code>, for members X of types T = <code>bool</code> or T = <code>double</code>;</li>
<li><code>alglib::T_1d_array X</code>, for members of types <code>alglib_impl::ae_vector</code>;</li>
<li><code>alglib::T_2d_array X</code>, for members of types <code>alglib_impl::ae_matrix</code>;</li>
<li>For the vector and matrix types, T = {<code>boolean</code>,<code>integer</code>,<code>real</code>,<code>complex</code>} matching the datatypes {<code>DT_BOOL</code>,<code>DT_INT</code>,<code>DT_REAL</code>,<code>DT_COMPLEX</code>}; the corresponding field in the C (<code>alglib_impl::</code>) type is always initialized to the corresponding datatype.</li>
</ul>
</p>
<p>
In the C++ (<code>alglib::</code>) namespace, a reflection of most routines from the C (<code>alglib_impl::</code>) namespace is called under an error-handling wrapper.
In almost all cases, this takes the form
<pre class=p_example>
   alglib_impl::ae_state_init();
   TryCatch()
   alglib_impl::Op(Args);
   alglib_impl::ae_state_clear();
</pre>
Arguments are converted as:
<ul>
<li><code>*X.c_ptr()</code> &mdash; for <code>alglib_impl::ae_complex</code> types,</li>
<li><code>X</code> &mdash; for all other scalar types (<code>bool</code>, <code>alglib_impl::ae_int_t</code>, <code>double</code>),</li>
<li><code>ConstT(Type, X)</code> &mdash; for vector, matrix and other object types <code>alglib_impl::</code>T.</li>
</ul>
The values returned are always of scalar type and are returned as
<ul>
<li><code>ComplexOf(X)</code> &mdash; for routines of type <code>alglib_impl::ae_complex</code>,</li>
<li><code>X</code> &mdash; for routines of all other scalar types (<code>bool</code>, <code>alglib_impl::ae_int_t</code>, <code>double</code>),</li>
</ul>
</p>
<p>
The other wrapper forms that occur in the C++ namespace are for
<ul>
<li>reduced forms of wrapper routines in which some arguments are internally assigned default values this always occurs under the conditional #if !defined AE_NO_EXCEPTIONS</li>
<li>polling loops for the interation routines, which have the general form
<pre class=p_example>
   alglib_impl::ae_state_init();
   TryCatch()
   alglib_impl::ae_assert(... conditions ... message);
   while (alglib_impl::IterationRoutine(state.c_ptr()))
   BegPoll
      if (state.Flag1) Op1(...);
      else if (state.Flag2) Op2(...);
      ...
      else alglib_impl::ae_assert(false, "ALGLIB: exception generated in user callback");
   EndPoll
   alglib_impl::ae_state_clear();
</pre>
</li>
</ul>
</p>
<p>
<a name=supp_ObjClassDef class=sheader></a><h3>A3.2. Defining Object Classes</h3>
The current implementation defines an object class for some C types <code>alglib_impl::</code>Type,
layering on top of it a C++ type <code>alglib::</code>TypeI to handle object constructors and <code>alglib::</code>Type to internalize *_init(), *_copy(), *_free() and to enforce the distinction for <code>alglib_impl::</code>Type between public and private members. The details of this implementation should not be relied on: it will undergo further changes as we experiment with different object models, with an eye toward eliminating it entirely and going fully native with C++.
</p>
<p>
To expedite this process, the routines _Type_{init,init_copy,clear,destroy} have been renamed and/or redefined as Type_{init,copy,free}.
In the original ALGLIB distribution (the GPL version, as of version 3.16.0), malloc() and free() are used.
Most of the need for them has been eliminated, which also entails minor revisions to TestZ.cpp to redefine some of its test conditions.
</p>
<p>
For <code>DecClass</code>, the declaration is:
<pre class=p_example>
struct TypeI {
   TypeI();
   TypeI(const Type &amp;A);
protected:
   alglib_impl::Type Obj;
};
struct Type: public TypeI {
   Type();
   Type(const Type &amp;A);
   Type &amp;operator=(const Type &amp;A);
   ~Type();
   alglib_impl::Type *c_ptr();
   alglib_impl::Type *c_ptr() const;
   Pars ... public members (reference variables for scalar types) ...
}
</pre>
</p>
<p>
For <code>DefClass</code>, the definition is:
<pre class=p_example>
TypeI::TypeI() {
   alglib_impl::ae_state_init();
   TryX { alglib_impl::Type_free(&amp;Obj, false); ThrowErrorMsg(); }
   memset(&amp;Obj, 0, sizeof Obj), alglib_impl::Type_init(&amp;Obj, false);
   alglib_impl::ae_state_clear();
}
TypeI::TypeI(const TypeI &amp;A) {
   alglib_impl::ae_state_init();
   TryX { alglib_impl::Type_free(&amp;Obj, false); ThrowErrorMsg(); }
   memset(&amp;Obj, 0, sizeof Obj), alglib_impl::Type_copy(&amp;Obj, const_cast&lt;alglib_impl::Type *&gt;(&amp;A.Obj), false);
   alglib_impl::ae_state_clear();
}
Type::Type(): TypeI() Vars ... initializations of public members ... { }
Type::Type(const Type &amp;A): TypeI(A) Vars ... initializations of public members ... { }
Type &amp;Type::operator=(const Type &amp;A) {
   if (this == &amp;A) return *this;
   alglib_impl::ae_state_init();
   TryCatch(*this)
   alglib_impl::Type_free(&amp;Obj, false);
   memset(&amp;Obj, 0, sizeof Obj), alglib_impl::Type_copy(&amp;Obj, const_cast&lt;alglib_impl::Type *&gt;(&amp;A.Obj), false);
   alglib_impl::ae_state_clear();
   return *this;
}
Type::~Type() { alglib_impl::Type_free(&amp;Obj, false); }
alglib_impl::Type *Type::c_ptr() { return &amp;Obj; }
alglib_impl::Type *Type::c_ptr() const { return const_cast&lt;alglib_impl::Type *&gt;(&amp;Obj); }
</pre>
</p>
<p>
The following alternate form has also been tested, where the destruction and assignment operators are moved into TypeI:
</p>
<p>
For DecClass, the declaration is:
<pre class=p_example>
struct TypeI {
   TypeI();
   TypeI(const TypeI &amp;A);
   TypeI &amp;operator=(const TypeI &amp;A);
   ~TypeI();
protected:
   alglib_impl::Type Obj;
};
struct Type: public TypeI {
   Type();
   Type(const Type &amp;A);
   Type &amp;operator=(const Type &amp;A);
   ~Type();
   alglib_impl::Type *c_ptr();
   alglib_impl::Type *c_ptr() const;
   Pars ... public members (reference variables for scalar types) ...
}
</pre>
</p>
For DefClass, the definition is:
<pre class=p_example>
TypeI::TypeI() {
   alglib_impl::ae_state_init();
   TryX { alglib_impl::Type_free(&amp;Obj, false); ThrowErrorMsg(); }
   memset(&amp;Obj, 0, sizeof Obj), alglib_impl::Type_init(&amp;Obj, false);
   alglib_impl::ae_state_clear();
}
TypeI::TypeI(const TypeI &amp;A) {
   alglib_impl::ae_state_init();
   TryX { alglib_impl::Type_free(&amp;Obj, false); ThrowErrorMsg(); }
   memset(&amp;Obj, 0, sizeof Obj), alglib_impl::Type_copy(&amp;Obj, const_cast&lt;alglib_impl::Type *&gt;(&amp;A.Obj), false);
   alglib_impl::ae_state_clear();
}
TypeI &amp;TypeI::operator=(const TypeI &amp;A) {
   if (this == &amp;A) return *this;
   alglib_impl::ae_state_init();
   TryCatch(*this)
   alglib_impl::Type_free(&amp;Obj, false);
   memset(&amp;Obj, 0, sizeof Obj), alglib_impl::Type_copy(&amp;Obj, const_cast&lt;alglib_impl::Type *&gt;(&amp;A.Obj), false);
   alglib_impl::ae_state_clear();
   return *this;
}
TypeI::~TypeI() { alglib_impl::Type_free(&amp;Obj, false); }
Type::Type(): TypeI() Type::Type(): TypeI() Vars ... initializations of public members ... { }
Type::Type(const Type &amp;A): TypeI(A) Vars ... initializations of public members ... { }
Type &amp;Type::operator=(const Type &amp;A) { TypeI::operator=(A); return *this; }
Type::~Type() { }
alglib_impl::Type *Type::c_ptr() { return &amp;Obj; }
alglib_impl::Type *Type::c_ptr() const { return const_cast&lt;alglib_impl::Type *&gt;(&amp;Obj); }
</pre>
</p>
<p>
<a name=supp_Links class=sheader></a><h2>A4. ALGLIB++ Package Dependencies</h2>
ALGLIB originally distributed each of the subpackage modules in separate files.
Starting with Version 3, they were compiled into larger package modules, in most cases, each module dedicated to a specific application area.
A vestige of the earlier configuration was later reintroduced, as a compromise.
This compromise is retained in ALGLIB++, except that the subpackages have each been segregated within their respective package modules.
A dependency list has not been included in the Makefiles distributed with ALGLIB++, except for the package modules themselves.
Subpackage dependencies are listed within the module files, themselves.
For reference, the following is the minimal spanning tree of the dependency hierarchy, listed roughly in order of dependence.
Note that all packages depend on the infrastructure provided in the Ap.{cpp,h} files.
<ul>
<li>AlgLibInternal:<ul>
   <li>SCODES:</li>
   <li>APSERV:</li>
   <li>TSORT: APSERV</li>
   <li>ABLASF:</li>
   <li>ABLASMKL:</li>
   <li>CREFLECTIONS:</li>
   <li>ROTATIONS:</li>
   <li>TRLINSOLVE:</li>
   <li>SAFESOLVE:</li>
   <li>HBLAS:</li>
   <li>SBLAS: APSERV</li>
   <li>BLAS:</li>
   <li>LINMIN:</li>
   <li>XBLAS:</li>
   <li>BASICSTATOPS: TSORT</li>
   <li>HPCCORES:</li>
   <li>NTHEORY:</li>
   <li>FTBASE: APSERV, NTHEORY</li>
   <li>NEARUNITYUNIT:</li>
</ul></li>
<li>AlgLibMisc: AlgLibInternal<ul>
   <li>NEARESTNEIGHBOR: (AlgLibInternal) SCODES, TSORT</li>
   <li>HQRND: (AlgLibInternal) APSERV, ABLASF</li>
   <li>XDEBUG:</li>
</ul></li>
<li>DiffEquations: AlgLibInternal<ul>
   <li>ODESOLVER: (AlgLibInternal) APSERV</li>
</ul></li>
<li>FastTransforms: AlgLibInternal<ul>
   <li>FFT: (AlgLibInternal) FTBASE</li>
   <li>FHT: FFT</li>
   <li>CONV: FFT</li>
   <li>CORR: CONV</li>
</ul></li>
<li>SpecialFunctions: AlgLibMisc [AlgLibInternal]<ul>
   <li>GAMMAFUNC:</li>
   <li>NORMALDISTR: (AlgLibMisc) HQRND</li>
   <li>IGAMMAF: GAMMAFUNC, NORMALDISTR</li>
   <li>ELLIPTIC:</li>
   <li>HERMITE:</li>
   <li>DAWSON:</li>
   <li>TRIGINTEGRALS:</li>
   <li>POISSONDISTR: IGAMMAF</li>
   <li>BESSEL:</li>
   <li>IBETAF: GAMMAFUNC, NORMALDISTR</li>
   <li>FDISTR: IBETAF</li>
   <li>FRESNEL:</li>
   <li>JACOBIANELLIPTIC:</li>
   <li>PSIF:</li>
   <li>EXPINTEGRALS:</li>
   <li>LAGUERRE:</li>
   <li>CHISQUAREDISTR: IGAMMAF</li>
   <li>LEGENDRE:</li>
   <li>BETAF: GAMMAFUNC</li>
   <li>CHEBYSHEV:</li>
   <li>STUDENTTDISTR: IBETAF</li>
   <li>BINOMIALDISTR: (AlgLibInternal) NEARUNITYUNIT │ IBETAF</li>
   <li>AIRYF:</li>
</ul></li>
<li>LinAlg: AlgLibMisc [AlgLibInternal]<ul>
   <li>SPARSE: (AlgLibInternal) ABLASMKL, TSORT │ (AlgLibMisc) HQRND</li>
   <li>ABLAS: (AlgLibInternal) APSERV, ABLASF, ABLASMKL</li>
   <li>DLU: ABLAS</li>
   <li>SPTRF: SPARSE, DLU</li>
   <li>AMDORDERING: SPARSE, ABLAS</li>
   <li>SPCHOL: AMDORDERING</li>
   <li>MATGEN: (AlgLibInternal) CREFLECTIONS │ (AlgLibMisc) HQRND │ ABLAS</li>
   <li>TRFAC: (AlgLibInternal) ROTATIONS │ SPTRF, SPCHOL, MATGEN</li>
   <li>RCOND: (AlgLibInternal) TRLINSOLVE, SAFESOLVE │ TRFAC</li>
   <li>MATINV: RCOND</li>
   <li>ORTFAC: (AlgLibInternal) CREFLECTIONS, HBLAS, SBLAS │ (AlgLibMisc) HQRND │ ABLAS</li>
   <li>FBLS: (AlgLibInternal) ROTATIONS | ORTFAC</li>
   <li>BDSVD: (AlgLibInternal) ROTATIONS │ (AlgLibMisc) HQRND │ ABLAS</li>
   <li>SVD: (AlgLibInternal) BLAS │ ORTFAC, BDSVD</li>
   <li>NORMESTIMATOR: SPARSE, MATGEN</li>
   <li>HSSCHUR: (AlgLibInternal) ROTATIONS, BLAS │ ABLAS</li>
   <li>EVD: (AlgLibInternal) BASICSTATOPS │ SPARSE, MATGEN, ORTFAC, HSSCHUR</li>
   <li>SCHUR: ORTFAC, HSSCHUR</li>
   <li>SPDGEVD: MATINV, EVD</li>
   <li>INVERSEUPDATE:</li>
   <li>MATDET: TRFAC</li>
</ul></li>
<li>Integration: SpecialFunctions LinAlg<ul>
   <li>GQ: (SpecialFunctions) GAMMAFUNC │ (LinAlg) EVD</li>
   <li>GKQ: GQ</li>
   <li>AUTOGK: GKQ</li>
</ul></li>
<li>Solvers: LinAlg [AlgLibInternal]<ul>
   <li>DIRECTDENSESOLVERS: (AlgLibInternal) XBLAS │ (LinAlg) RCOND, SVD</li>
   <li>LINLSQR: (LinAlg) SVD, NORMESTIMATOR</li>
   <li>POLYNOMIALSOLVER: (LinAlg) TRFAC, EVD</li>
   <li>NLEQ: (AlgLibInternal) LINMIN │ (LinAlg) FBLS</li>
   <li>DIRECTSPARSESOLVERS: (LinAlg) TRFAC</li>
   <li>LINCG: (LinAlg) SPARSE, MATGEN</li>
</ul></li>
<li>Statistics: SpecialFunctions LinAlg [AlgLibInternal AlgLibMisc]<ul>
   <li>BASESTAT: (AlgLibInternal) BASICSTATOPS │ (LinAlg) ABLAS</li>
   <li>WSR: (AlgLibInternal) APSERV</li>
   <li>STEST: (SpecialFunctions) BINOMIALDISTR</li>
   <li>CORRELATIONTESTS: (SpecialFunctions) STUDENTTDISTR │ BASESTAT</li>
   <li>STUDENTTTESTS: (SpecialFunctions) STUDENTTDISTR</li>
   <li>MANNWHITNEYU: (AlgLibMisc) HQRND</li>
   <li>JARQUEBERA:</li>
   <li>VARIANCETESTS: (SpecialFunctions) FDISTR, CHISQUAREDISTR</li>
</ul></li>
<li>Optimization: Solvers [AlgLibInternal LinAlg]<ul>
   <li>CQMODELS: (LinAlg) TRFAC, FBLS</li>
   <li>OPTGUARDAPI: (AlgLibInternal) APSERV</li>
   <li>OPTSERV: (LinAlg) MATINV, SVD │ OPTGUARDAPI</li>
   <li>SNNLS: (LinAlg) TRFAC, FBLS</li>
   <li>SACTIVESETS: OPTSERV, SNNLS</li>
   <li>QQPSOLVER: CQMODELS, SACTIVESETS</li>
   <li>MINLBFGS: (AlgLibInternal) LINMIN │ (LinAlg) FBLS │ OPTSERV</li>
   <li>LPQPSERV: (LinAlg) SPARSE</li>
   <li>VIPMSOLVER: (LinAlg) DIRECTDENSESOLVERS │ CQMODELS, MINLBFGS, LPQPSERV</li>
   <li>NLCSQP: VIPMSOLVER</li>
   <li>QPDENSEAULSOLVER: (Solvers) DIRECTDENSESOLVERS, LINLSQR │ QQPSOLVER, MINLBFGS, LPQPSERV</li>
   <li>MINBLEIC: (AlgLibInternal) LINMIN │ CQMODELS, SACTIVESETS</li>
   <li>QPBLEICSOLVER: MINBLEIC</li>
   <li>MINQP: VIPMSOLVER, QPDENSEAULSOLVER, QPBLEICSOLVER</li>
   <li>LPQPPRESOLVE: (LinAlg) SPARSE</li>
   <li>REVISEDDUALSIMPLEX: (LinAlg) TRFAC | LPQPPRESOLVE</li>
   <li>MINLP: VIPMSOLVER, REVISEDDUALSIMPLEX</li>
   <li>NLCSLP: (AlgLibInternal) LINMIN │ OPTSERV, REVISEDDUALSIMPLEX</li>
   <li>MINNLC: NLCSQP, MINBLEIC, NLCSLP</li>
   <li>MINBC: (AlgLibInternal) LINMIN │ OPTSERV</li>
   <li>MINNS: MINBLEIC</li>
   <li>MINCOMP: MINLBFGS, MINBLEIC</li>
   <li>MINCG: (AlgLibInternal) LINMIN │ OPTSERV</li>
   <li>MINLM: MINQP</li>
</ul></li>
<li>Interpolation: Integration Optimization [AlgLibInternal AlgLibMisc LinAlg Solvers]<ul>
   <li>IDW: (AlgLibMisc) HQRND, NEARESTNEIGHBOR │ (LinAlg) ABLAS</li>
   <li>RATINT: (AlgLibInternal) TSORT</li>
   <li>FITSPHERE: (Optimization) MINNLC, MINLM</li>
   <li>INTFITSERV: (LinAlg) TRFAC</li>
   <li>SPLINE1D: (LinAlg) FBLS │ (Solvers) LINLSQR │ INTFITSERV</li>
   <li>PARAMETRIC: (Integration) AUTOGK │ SPLINE1D</li>
   <li>SPLINE3D: SPLINE1D</li>
   <li>POLINT: RATINT</li>
   <li>LSFIT: (Optimization) MINLM │ SPLINE1D, POLINT</li>
   <li>RBFV2: (AlgLibMisc) NEARESTNEIGHBOR │ LSFIT</li>
   <li>SPLINE2D: (AlgLibInternal) SCODES │ SPLINE1D</li>
   <li>RBFV1: (AlgLibMisc) NEARESTNEIGHBOR │ LSFIT</li>
   <li>RBF: RBFV2, RBFV1</li>
   <li>INTCOMP: FITSPHERE, SPLINE1D</li>
</ul></li>
<li>DataAnalysis: Statistics Optimization [AlgLibInternal AlgLibMisc SpecialFunctions LinAlg Solvers]<ul>
   <li>PCA: (LinAlg) SVD, EVD │ (Statistics) BASESTAT</li>
   <li>BDSS: (Statistics) BASESTAT</li>
   <li>MLPBASE: (AlgLibInternal) SCODES, HPCCORES │ (LinAlg) SPARSE │ BDSS</li>
   <li>LDA: (LinAlg) MATINV, EVD</li>
   <li>SSA: (LinAlg) SVD, EVD</li>
   <li>LINREG: (SpecialFunctions) IGAMMAF │ (LinAlg) SVD │ (Statistics) BASESTAT</li>
   <li>FILTERS: LINREG</li>
   <li>LOGIT: (Solvers) DIRECTDENSESOLVERS │ MLPBASE</li>
   <li>MCPD: (Optimization) MINBLEIC</li>
   <li>MLPE: MLPBASE</li>
   <li>MLPTRAIN: (Solvers) DIRECTDENSESOLVERS │ (Optimization) MINLBFGS │ MLPE</li>
   <li>CLUSTERING: (AlgLibInternal) BLAS │ (AlgLibMisc) HQRND │ (Statistics) BASESTAT</li>
   <li>DFOREST: (AlgLibInternal) SCODES │ (AlgLibMisc) HQRND │ BDSS</li>
   <li>KNN: (AlgLibMisc) HQRND, NEARESTNEIGHBOR │ BDSS</li>
   <li>DATACOMP: CLUSTERING</li>
</ul></li>
<li>TestC, TestI: DataAnalysis DiffEquations FastTransforms Interpolation</li>
<li>TestX: DataAnalysis</li>
<li>TestZ: Interpolation</li>
<li>TestY: LinAlg</li>
</ul>
</p>
<p>
<a name=supp_Commercial class=sheader></a><h2>A5. ALGLIB Commercial Version: Notes</h2>
<font size=2>[
<a href=#supp_Commercial1>ALGLIB Commercial Notifications</a> |
<a href=#supp_Commercial2>ALGLIB Commercial Support by Routine</a>
]</font>
</p>
<p>
For those who wish to use the improvements provided by the Commercial version of ALGLIB,
the following is a list of the routines in ALGLIB that have been provided with enhancements there; along with the corresponding notifications.
There are 6 groups of routines (labeled A, B, C, D, E and F), based on which parts of which notifications apply to them.
<a name=supp_Commercial1 class=sheader></a><h3>A5.1. ALGLIB Commercial Notifications</h3>
<pre class=narration>
ABCDEF	│ COMMERCIAL EDITION OF ALGLIB:
ABCDEF	│
ABC───	│ Commercial Edition of ALGLIB includes following important improvements of this function:
───DE─	│ Commercial version of ALGLIB includes one important improvement of this function, which can be used from C++ and C#:
─────F	│ Commercial version of ALGLIB includes two important improvements of this function, which can be used from C++ and C#:
ABC───	│ ∙	high-performance native backend with same C# interface (C# version)
─BC───	│ ∙	hardware vendor (Intel) implementations of linear algebra primitives (C++ and C# versions, x86_64 platform)
───DEF	│ ∙	Intel MKL support (lightweight Intel MKL is shipped with ALGLIB)
AB────	│ ∙	multithreading support (C++ and C# versions)
─────F	│ ∙	multithreading support
───DEF	│
───DEF	│ Intel MKL gives approximately constant (with respect to number of worker threads)
───DEF	│ acceleration factor which depends on CPU being used, problem size and "baseline" ALGLIB edition
───DEF	│ which is used for comparison.
─────F	│ Best results are achieved for high-dimensional problems
─────F	│ (NVars is at least 256).
─────F	│
─────F	│ Multithreading is used to accelerate initial phase of LDA, which includes calculation of products of large matrices.
─────F	│ Again, for best efficiency problem must be high-dimensional.
───D─F	│
───D─F	│ Generally, commercial ALGLIB is several times faster than open-source generic C edition,
───D─F	│ and many times faster than open-source C# edition.
───DE─	│
───DE─	│ Multithreaded acceleration is NOT supported for this function.
ABCDEF	│
ABCDEF	│ We recommend you to read 'Working with the Commercial Version' section of ALGLIB Reference Manual
ABCDEF	│ in order to find out how to use performance-related features provided by commercial edition of ALGLIB.
</pre>
</p>
<p>
<a name=supp_Commercial2 class=sheader></a><h3>A5.2. ALGLIB Commercial Support by Routine</h3>
The routines are listed by subpackage module:
<ul>
<li>8.2.2. clustering<ul>
<li><b>B</b>: clusterizergetdistances, clusterizerrunahc, clusterizerrunkmeans</li>
</ul></li>
<li>8.2.4. dforest<ul>
<li><b>A</b>: dfbuilderbuildrandomforest</li>
</ul></li>
<li>8.2.6. knn<ul>
<li><b>A</b>: knnbuilderbuildknnmodel</li>
</ul></li>
<li>8.2.7. lda<ul>
<li><b>F</b>: fisherlda</li>
<li><b>B</b>: fisherldan</li>
</ul></li>
<li>8.2.11. mlpbase<ul>
<li><b>A</b>: mlpallerrorssparsesubset, mlpallerrorssubset, mlpavgce, mlpavgcesparse, mlpavgerror, mlpavgerrorsparse, mlpavgrelerror, mlpavgrelerrorsparse, mlpclserror, mlperror, mlperrorsparse, mlperrorsparsesubset, mlperrorsubset, mlpgradbatch, mlpgradbatchsparse, mlpgradbatchsparsesubset, mlpgradbatchsubset, mlprelclserror, mlprelclserrorsparse, mlprmserror, mlprmserrorsparse</li>
</ul></li>
<li>8.2.13. mlptrain<ul>
<li><b>A</b>: mlpcontinuetraining, mlpkfoldcv, mlptrainensemblees, mlptrainnetwork</li>
</ul></li>
<li>8.2.14. pca<ul>
<li><b>B</b>: pcabuildbasis, pcatruncatedsubspace, pcatruncatedsubspacesparse</li>
</ul></li>
<li>8.6.2. idw<ul>
<li><b>A</b>: idwbuildercreate</li>
</ul></li>
<li>8.6.4. lsfit<ul>
<li><b>B</b>: barycentricfitfloaterhormann barycentricfitfloaterhormannwc, lsfitlinear, lsfitlinearc, lsfitlinearw, lsfitlinearwc, polynomialfit, polynomialfitwc, spline1dfitcubic, spline1dfitcubicwc, spline1dfithermite, spline1dfithermitewc</li>
</ul></li>
<li>8.6.8. rbf<ul>
<li><b>A</b>: rbfgridcalc2v, rbfgridcalc2vsubset, rbfgridcalc3v, rbfgridcalc3vsubset</li>
</ul></li>
<li>8.6.9. spline1d<ul>
<li><b>B</b>: spline1dfitpenalized, spline1dfitpenalizedw (Not supported after version 3.15.0, no commercial-level replacement in 3.16.0)</li>
</ul></li>
<li>8.6.10. spline2d<ul>
<li><b>B</b>: spline2dbuildercreate, spline2dbuildersetalgoblocklls, spline2dbuildersetalgofastddm, spline2dfit</li>
</ul></li>
<li>8.7.1. ablas<ul>
<li><b>B</b>: cmatrixgemm, cmatrixherk, cmatrixlefttrsm, cmatrixrighttrsm, rmatrixgemm, rmatrixlefttrsm, rmatrixrighttrsm, rmatrixsyrk</li>
</ul></li>
<li>8.7.2. bdsvd<ul>
<li><b>D</b>: rmatrixbdsvd</li>
</ul></li>
<li>8.7.3. evd<ul>
<li><b>B</b>: eigsubspacesolvedenses</li>
<li><b>C</b>: hmatrixevd, rmatrixevd, smatrixevd, smatrixevdr, smatrixtdevd</li>
</ul></li>
<li>8.7.7. matinv<ul>
<li><b>B</b>: cmatrixinverse, cmatrixluinverse, cmatrixtrinverse, hpdmatrixcholeskyinverse, hpdmatrixinverse, rmatrixinverse, rmatrixluinverse, rmatrixtrinverse, spdmatrixcholeskyinverse, spdmatrixinverse</li>
</ul></li>
<li>8.7.9. ortfac<ul>
<li><b>B</b>: cmatrixlq, cmatrixlqunpackq, cmatrixqr, cmatrixqrunpackq, rmatrixlq, rmatrixlqunpackq, rmatrixqr, rmatrixqrunpackq</li>
<li><b>C</b>: hmatrixtd, hmatrixtdunpackq, rmatrixbd, rmatrixbdmultiplybyq, rmatrixbdunpackq, rmatrixhessenberg, rmatrixhessenbergunpackq, smatrixtd, smatrixtdunpackq</li>
</ul></li>
<li>8.7.11. schur<ul>
<li><b>E</b>: rmatrixschur</li>
</ul></li>
<li>8.7.14. svd<ul>
<li><b>C</b>: rmatrixsvd</li>
</ul></li>
<li>8.7.15. trfac<ul>
<li><b>B</b>: cmatrixlu, hpdmatrixcholesky, rmatrixlu, spdmatrixcholesky</li>
</ul></li>
<li>8.9.1. directdensesolvers<ul>
<li><b>B</b>: cmatrixlusolvem, cmatrixlusolvemfast, cmatrixsolve, cmatrixsolvefast, cmatrixsolvem, cmatrixsolvemfast, hpdmatrixsolve, hpdmatrixsolvefast, hpdmatrixsolvem, hpdmatrixsolvemfast, rmatrixlusolvem, rmatrixlusolvemfast, rmatrixsolve, rmatrixsolvefast, rmatrixsolvels, rmatrixsolvem, rmatrixsolvemfast, spdmatrixsolve, spdmatrixsolvefast, spdmatrixsolvem, spdmatrixsolvemfast</li>
</ul></li>
<li>8.11.1. basestat<ul>
<li><b>A</b>: rankdata, rankdatacentered</li>
<li><b>B</b>: covm, covm2, pearsoncorrm, pearsoncorrm2, spearmancorrm, spearmancorrm2</li>
</ul></li>
</ul>
</p>
<p>
<a name=supp_History class=sheader></a><h2>A6. ALGLIB &rArr; ALGLIB++ Revision Sequence</h2>
<font size=2>[
<a href=#supp_History1 class=sheader>Revision Notes</a> |
<a href=#supp_History2 class=sheader>Test Stages</a> |
<a href=#supp_History3 class=sheader>Test Results</a>
]</font>
</p>
<p>
We maintain several independently recoded versions of ALGLIB, locally, for testing and experimentation and cross-validation.
The <a href=#supp_CppDemoModule>C++ Demo Module</a> is partly derived from one of these; and the revisions made here - as well as in the local versions - result from reconciling the different versions with one another.
</p>
<a name=supp_History1 class=sheader></a><h3>A6.1. Revision Notes</h3>
<pre class=narration>
∙	Corrected "ASCI" to "ASCII" and "#alglib_packages" to "#alglib_main" (mistakes inherited from the original ALGLIB manual).
∙	The files were moved to a single top-level directory and the names normalized.
∙	References to Commercial ALGLIB in the comments and functions were removed.
	A separate file was compiled collating all of the Commercial ALGLIB comments of the original package.
∙	The reprogramming, itself, will be under GPL, except that recoding, repairs, and other additions made,
	particularly in DSP, file {en/de}-coding, video/music/sound processing, time-frequency analysis,
	will be made available for the commercial version to use, except those derived from other GPL-sources.
∙	Full integration of a C++ version of the Time Frequency Toolkit (currently in MATLAB)
	or the equivalent into FastTransforms is planned.
∙	Full integration of GMP (as part of the expanded FastTransforms / DSP module)
	and a C/C++ version of LAPACK (as part of the expanded LinAlg and Solvers modules) are both planned.
∙	DSP and Time-Frequency analysis; file-transfer; voice generation/recognition, computer vision, sound and video production
	is also planned.
∙	Expansion of serialization/deserialization routines to include I/O for different file formats.
∙	Possible integration with a refactored C++ version FFMPEG++, of FFMPEG, is undergoing evaluation.
∙	Possible integration of a refactored C++ GUI-free version of Audacity is undergoing evaluation.
∙	For POSIX non-compliant configurations, the user assumes primary responsibility for maintenance.
	No support will be provided, but corrections or fixes reported will be noted, tested (where possible) and added.
∙	Conflicting labelling in 6.3 and 6.3.1: partially repaired in the version 3.16.0 manual.
∙	The alglib_impl namespace in ALGLIB was mostly in C, as was TestC.cpp.
∙	Support for C is now moved away from in favor of nativizing the C++ code.
	The Idw{0,1}.c files are a demonstration of possible future directions; we're also re-examining ALGLIB Version 2.
	The ALGLIB library's infrastructure is naturally tailored for C++; laden with idioms that practically scream out "C++!".
∙	Test{I,X,Y,Z} work with alglib and are C++.
∙	The Makefile and revisions have only been tried with Linux:x86_64:GCC.
∙	The revision to handle the rounding on the FP unit was only added in for Linux:x86_64:GCC.
∙	Only the structural changes mentioned here were made; not any recoding, other than what was done for this.
	The initial "structural" changes made, before actual recoding included a normalization of the ordering
	(determined automatically with the aid of the compiler) of the routines and extraction of a dependency list;
	and various equivalence transforms.
∙	The God-objects in alglib_impl (ae_state) and RCOMM routines were removed.
	For the time being, static and global variable are no longer thread-local.
	Only the commercial version has support for multi-processors or multi-threading;
	but a small amount of it has crept into the GPL version in test_x and inherited, from this, in ALGLIB++'s TestX file.
∙	The partial compilation dependency includes from ALGLIB are not present.
	Instead, the modules are collated and the minimal dependency network is sorted out and documented separately.
	Intra-module and extra-module dependencies are distinguished.
	There's enough information here to separate out the modules and create a suitable Makefile.
∙	The order of
		minlm_lmprepare(...), minlmsetacctype(...), minlmsetcond(...)
	is switched to:
		minlmsetacctype(...), minlmsetcond(...), minlm_lmprepare(...)
	In the namespace alglib_impl in:
		minlmcreatevj(), minlmcreatev(), minlmcreatefgh(), minlmcreatefj()
∙	The calculation of refavgce in:
		testdforestunit_basictestallsame()
		testdforestunit_basictestrandom()
	is rewritten to match that used by dfavgce().
	These tests produce false positives: NAN's may be produced, which pass, because the comparison condition is stated negatively.
∙	The minqp tests produced sporadic failures (about 4% of the time) in the original version of ALGLIB.
	They were masked as false positives, which was uncovered in ALGLIB++ after stage 31, and became visible as a result.
	This issue has been left unresolved.
∙	2 C-incompatibilities: ByteOrder and CurCPU are defined at start-up time.
	In C, it'll have to be replaced by a "startup" routine in Ap.cpp and called in up front main().
	SSE2 intrinsics are not present in all GCC installations on Intel, so the automatic definition of AE_HAS_SSE2_INTRINSICS has been removed.
	It must be explicitly #defined, instead (preferrably in Ap.h, where indicated).
∙	Many more C-incompatibilities are introduced on and after stage 33.
∙	The replacement of ae_cpuid() by CurCPU excludes the 1-compiler/loader - heterogeneous-CPU configurations;
	which is not supported in the GPL version.
∙	In ALGLIB _clear should have been _destroy in ~vector_wrapper(), ~matrix_wrapper() (as well as in attach_to()).
	That is
	vector_clear	⇒	vector_destroy in ae_vector_wrapper::~ae_vector_wrapper() and ae_vector_wrapper::attach_to()
	matrix_clear	⇒	matrix_destroy in ae_matrix_wrapper::~ae_matrix_wrapper() and ae_matrix_wrapper::attach_to()
	Under the revisions described here, they each become *_free(..., ae_false), while *_clear(...) would have been written as *_free(..., ae_true).
	Both are equivalent in the GPL version, because *_clear() and *_destroy() are the same in that version;
	but this is only an incidental equivalence that should not be relied on.
∙	To better and more directly implement the assignment operator, a move constructor should be added;
		Type_move(T *A, const T *B),
	which has the effect of
		(Type_free(A), Type_copy(A, B)),
	except for optimizing out any (free + malloc) sequences.
	Then, under the revision, there would be:
	―	Type_init(Type *A),
	―	Type_copy(Type *A, const Type *B),
	―	Type_free(Type *A),
	―	Type_move(Type *A, const Type *B).
∙	Different/expanded version of the testing routines is planned for SpecialFunctions, including forward/inverse pair testing.
∙	A possible redefinition of SpecialFunctions using the interpolation methods in ALGLIB itself is planned.
</pre>
</p>
<p>
<a name=supp_History2 class=sheader></a><h3>A6.2. Test Stages</h3>
<pre class=narration>
00	Comment-layout was redone to make comments conspicuous to "grep" and other search utilities.
	Elimination of parameter comments for ae_{vector,matrix} and replacement by pointer typedefs {B,C,R,Z}{Vector,Matrix}.
	Indent was used to normalize the layout.
01	The original version: ALGLIB 3.15.0.
	Many of the revisions described in the previous section were implemented here and in the previous stage.
02	The allocation counters were fully turned on.
03	The rcomm-related structures removed and replaced by an integer "stage" variable; the AutoS macro added (for "static Thread_local").
04	The FP operations removed, except for the FP comparison operations.
05	The FP comparison operations replaced by macros that directly invoke the floating point operators {==,!=,&lt;,&lt;=,&gt;,&gt;=} with the optimization bug fixed;
	this requires repairing a flaw in GCC on x86_64 platforms and possibly elsewhere.
06	*_clear(), *_destroy() merged into *_free(); and *_init_copy() renamed *_copy().
07	The state structure removed, except the frame pointers --
	to regain thread-safety will require making TopFr, CurMsg, CurFlags, CurBreakAt thread-local;
	(but multi-threadedness is not officially part of the non-commercial distribution).
08	The frame base removed from the state structure; it is block-level static and compile-time fixed and does not need to be made thread-safe.
	The relevant parts of the Ap.cpp and Ap.h files were rewritten.
09	The state structure has been emptied.
10	The state structure has been removed.
11	The extra xparams are removed. They are only relevant for the commercial version.
12	The object classes were partially reduced: DiffEquations.{cpp,h} only.
13	The object classes were fully reduced (which invalidates TestZ).
14	TestZ was changed to reflect the update.
15	Normalized the "This"/"Obj" entries in the object class definitions.
16	Wrapped the ConstT, TryCatch() and TryX code; and redid the reinterpret_cast and const_cast items in the alglib namespace code.
17	Wrapped up the New{Obj,Vector,Matrix,Block}/RefObj/Dup{Vector,Matrix} code; _Type_{init,copy,free}() renamed Type_{init,copy,free}().
18	The FP comparison macros were removed.
19	Normalized the RCOMM routines, and the *mcsrch() routines, into this form.
	Remade *mcsrch(...,&amp;stage) into a boolean that returns the condition stage != 0.
	The state variable is made to revert to -1 upon exit.
	Removed the ae_len_v function.
	Normalized comparison operators in loops and &amp;X[0] to X (except in 1 place in Ap.cpp).
20	Normalized other routines that have the same form as the RCOMM routines
	LinAlg.cpp: rcond_rmatrixestimatenorm, rcond_cmatrixestimatenorm
	Remade rcond_rmatrixestimatenorm(n,v,x,isgn,&amp;est,&amp;kase) into a boolean that returns the condition kase != 0.
	Remade rcond_cmatrixestimatenorm(n,v,x,&amp;est,&amp;kase,isave,rsave) into booleans that return the condition kase != 0.
	Removed the thread-local variables from v, isgn (which were originally both expanded inside the routine to hold them)
	Removed isave and rsave, rcond_internalcomplexrcond{save,load}all and removed the need for them.
21	Added in the SetVector(), SetMatrix() and SetObj() macros.
22	Recoded {r,c}matrixgemm[rec] in LinAlg.cpp to increase efficiency
	Removed the pexec (parallelism) stubs and replaced the in-line dead code by comments "[wW]as activated if:"
	They are only relevant for the commercial version.
	Reformatted TestC and changed the error-reporting conditions from !silent to !silent || errors.
	Reformatted the layout to combine the type/object section with function section in each namespace.
	CurErr made file-scope local with suitable redefinitions of set_error_flag() and ap_error().
	Reformatted TestC.cpp
23	Restored the 1D layer RBF test ... but with the delta-threshold raised from 0.35 to 0.45.
	A low probability of failure exists; error ratios as high as 0.42 have been seen.
24	Reordered minlm_lmprepare() to follow minlmsetcond() in the minlmcreate*() routines.
	Rewrote parts of:
	-	testdforestunit_basictestallsame() and testdforestunit_basictestrandom() in TestC.cpp.
	-	dforest_processvotingresults() in DataAnalysis.cpp
	to make them consistent with dfavgce() in DataAnalysis.cpp.
	Remade ae_cpuid() as an initialization routine and replaced it by CurCPU.
25	Separated the subpackages
26	3.16.0 upgrade
	Corrected a long-standing hidden bug testablasunit_testsyrk() in TestC.cpp: cct was initialized with itself, instead of with the transpose of cc.
        All of the extra infrastructure for internal tracing and timing, added in ALGLIB starting with version 3.16.0, has been kept out of ALGLIB++.
27	Normalized the Makefile
	Minor change in Ap.cpp.
28	Conversions of assignment expressions to update operators (++X, --X, X++, X--, X op= Y), where applicable.
29	Normalization of conditionals and layout.
30	In-line some of the alglib:: object member functions.
	Topological sorting of internal routines &amp; commenting out or eliminating dead-code and vestigial code from the commercial version.
	Normalized the RCOMM interface.
	Synthesized new routines, [ae_]randombool(), [ae_]randommid() and generalized versions of existing routines: ae_complex_from_d().
31	Synthesized new routines for real and complex approximate comparisons: {Near,Small}[At]{R,CR,C}().
	Normalized comparisons |A-B|/C &ge; D to |A-B| &ge; C&times;D, for C &ge; 0; possibly removing hidden bugs as a result.
	Normalized most error flags in TestC.cpp to *Ok and *Erred.
32	Corrected the Manual entry for "autogkintegrate" (it originally listed the entry for "odesolversolve").
	Corrections in the comments &amp; printouts; e.g.
		"launcn" → "launch" "traling" → "trailing", "trainig" → "training", "i.e \." → "i.e.", "i.e" → "i.e.",
		"inself" → "itself", "it's" → "its", "discripancy" → "discrepancy", "strucure" → "structure",
		"⋯intial⋯" → "⋯initial⋯", "lentgh" → "length", "loosing" → "losing", "Additonally" → "Additionally",
		"VIMP⋯" → "VIPM⋯", "fileds" → "fields", "ouput" → "output", "paremeter" → "parameter".
	Normalized all test routines and flags in TestC.cpp to true on success, false on failure.
	Normalized comparisons (A-B)/C &ge; D to A-B &ge; C&times;D, for C &ge; 0; removing a hidden bug in the PCA test in TestC.cpp.
	First round of normalization of comments &amp; documentation.
33	Further cleanup of unused/stub/legacy code from ALGLIB:
	Normalized test routines and flags in Test{X,Z}.cpp to *Ok; and true on success, false on error.
	Merge {b,i,r}{vector,matrix}setlengthatleast() into {vector,matrix}setlengthatleast().
	Removed aresameboolean(); already subsumed by "==";
	Normalized boolean comparisons, e.g. A&amp;&amp;B || !A&amp;&amp;!B &rArr; A == B
	Removed ae_never_call_it(): it's a legacy stub from the Commercial version of ALGLIB.
	Removed countdown(): it is unused.
	Removed ivectorappend(): it is unused.
	Removed maxreal3(); it's a duplicate of rmax3().
	Removed boundval(): it's a duplicate of rboundval().
	Normalization of structs and unions to C++ (embedded unions made anonymous; redundant typedefs removed).
	(Redefined the {B,C,R,Z}{Vector,Matrix} typedefs as structures, instead of as pointers.)
	Combined (the empty) ae_serializer_clear() into ae_serializer_stop() ― the two are always called together.
	Removed unsetintegerarray(), unsetrealarray(): they are duplicates of SetVector().
	Removed unsetrealmatrix(): it's a duplicate of SetMatrix().
	Made ae_vector_wrapper::c_ptr(), ae_matrix_wrapper::c_ptr() in-line in Ap.h and removed them from Ap.cpp.
	The declarations of ae_vector_wrapper::ae_vector_wrapper() and ae_vector_wrapper::operator=() in Ap.h were removed - unused.
	The declarations of ae_matrix_wrapper::ae_matrix_wrapper() and ae_matrix_wrapper::operator=() in Ap.h were removed - unused.
	The output parameters in ae_serializer_unserialize_{bool,int,int64,double} were remade into return values.
	The parameter type in ae_shared_pool_is_initialized() was raised from (void *) to (ae_shared_pool *).
	Changed the return type of ae_stream_{reader,writer} to bool; normalized them to true on success, false on failure.
	Changed cpp_{reader,writer} in Ap.cpp similarly.
	Redefined the ae_datatype typedef as the (previously unnamed) enum for DT_{BOOL,BYTE,INT,REAL,COMPLEX}.
	Converted multi-branch statements involving DT_* into switch statements.
	Moved the AE_SM_* constants from Ap.cpp to Ap.h, remaking them into an enum type ae_sermode_t.
	Redeclared serializer::mode as type ae_sermode_t.
	Converted multi-branch statements involving AE_SM_* into switch statements.
	Made the following (local) routines in Ap.cpp "static" and topologically sorted them:
		_ialglib_{rmv,cmv,mcopyblock,pack_n2,mm22,mm22x2}_sse2()
		ae_str2{bool,int,int64,double}(), ae_{bool,int,int64,double}2str()
		my_stricmp() filter_spaces() str_{vector,matrix}_create()
		parse_{bool,int,real,complex}_delim() _parse_real_delim() arraytostring()
	Made all _alglib* global variables in Ap.cpp static.
	Inverted my_stricmp() into a bool-returning function and renamed it strimatch().
	Remade CPU_SSE2 = 1 in Ap.h into an enum typedef ae_cpuid_t.
	Lifted the return type of ae_cpuid() in Ap.cpp and the type of CurCPU to ae_cpuid_t.
	Moved i{min,max}2(), imin3(), {i,r}max3(), rmaxabs3(), {i,r}boundval() from AlgLibInternal.{cpp,h} to Ap.{cpp,h}.
	Removed ae_{min,max}int(): they are duplicates respectively of i{min,max}2().
	Renamed ae_minreal() as rmin2() and ae_maxreal() as rmax2().
	Removed the unused or redundant types s{boolean,integer,real,complex}[array] from AlgLibInternal.{cpp,h};
	Converted sinteger ⇒ ae_int_t, sreal ⇒ double, srealarray ⇒ RVector;
	Redefined and replaced srealarray_{init,copy,free} by RVector_{init,copy,free}.
	Removed inttoreal() from AlgLibInternal.{cpp,h} ― it's unused and duplicates the typecast function double().
	Removed countnz{1,2}() from AlgLibInternal.{cpp,h} ― they are unused.
	Removed idivup() from AlgLibInternal.{cpp,h}; replacing idivup(a,b) by the operation (a + b - 1) / b.
	Removed rmul{2,3}() from AlgLibInternal.{cpp,h}; replacing rmul2(a,b) by (double)a * b, rmul3(a,b,c) by (double)a * b * c.
34	Preliminary work for the inclusion of a new multi-threading / concurrency core.
	OS-dependent low-level lock routines in Ap.cpp are consolidated.
	Consolidation of all system-dependent routines for locks and threads in Test{C,X}.cpp and Ap.{cpp,h}.
	―	mutex-related system-dependent primitives are encapsulated in TestC.cpp.
	―	thread-readed system-dependent primitives are encapsulated in Test{C,X}.cpp; some of them are tied to Ap.{cpp,h}.
	Still deciding on the multi-threading/concurrency architecture to devise and use.
	Assessing different implementations of the Pi Calculus as candidates.
	Further distancing from C to C++: AE_USE_CPP and AE_USE_CPP_BOOL are assumed and removed.
	AE_USE_CPP_SERIALIZATION and AE_USE_CPP_ERROR_HANDLING are assumed, but left intact.
	Consolidation of all system-dependent routines for locks and threads in Test{C,X}.cpp and Ap.{cpp,h}.
	―	Synthesis of alglib_impl::ae_count_cores()
	Made all _alglib* global variables in Ap.cpp static.
	eternal_malloc() embedded in ae_init_lock_eternal() and eliminated.
	ae_init_lock_eternal(ae_lock *lock) combined into ae_init_lock(ae_lock *lock, bool make_automatic) as:
	―	ae_init_lock(ae_lock *lock, bool is_static, bool make_automatic);
	with
	―	is_static = true, make_automatic = false for ae_init_lock_eternal(),
	―	is_static = false for ae_init_lock().
	Renamed ae_lock::eternal ae_lock::is_static.
	OWN_CALLER, OWN_AE remade into boolean (OWN_CALLER = false, OWN_AE = true)
	{x_string,x_vector,x_matrix}::owner redefined from enum { OWN_CALLER, OWN_AE } to boolean.
	ae_{vector,matrix}_wrapper::is_frozen_proxy inverted and renamed ae_{vector,matrix}_wrapper::owner.
	AE_{{,PARALLEL_}SINGLECORE,{SEQUENTIAL_,PARALLEL_}MULTICORE} remade into an enum; AE_NOENV = 0 added.
	AE_TEST renamed into a constant TestEnv as declared as the enum type.
	Multi-branch #if conditionals for the enum made into switch statements.
	Remade both sets of debug flags
	―	_ALGLIB_USE_{ALLOC_COUNTER,DBG_COUNTERS,VENDOR_KERNELS}
	―	_ALGLIB_VENDOR_MEMSTAT
	―	_ALGLIB_DEBUG_WORKSTEALING
	―	_ALGLIB_WSDBG_{NCORES,PUSHROOT_{OK,FAILED}}
	―	_ALGLIB_SET_{GLOBAL_THREADING,NWORKERS}
	―	_ALGLIB_GET_{ALLOC_COUNTER,CUMULATIVE_ALLOC_{SIZE,COUNT},CORES_COUNT,GLOBAL_THREADING,NWORKERS}
	into an enum debug_flag_t, renaming and merging them where they overlap
	Renamed ae_set_dbg_flag() as ae_set_dbg_value() - as indicated in the comments in ALGLIB.
	Converted all multi-branch statements involving debug_flag_t into switch statements.
	Raised the prototypes of ae_[sg]et_dbg_value() to:
	―	void ae_set_dbg_value(debug_flag_t flag_id, ae_int64_t flag_val);
	―	ae_int64_t ae_get_dbg_value(debug_flag_t id);
	Removed pythag2() from AlgLibInternal.{cpp,h} - it is a duplicate of safepythag2(); replaced pythag2() in LinAlg.cpp by safepythag2().
35	References to MinCGSetGradientCheck() in the comments removed.
	The *SetGradientCheck() functions have almost all been replaced by OptGuard functions in version 3.16.0.
	Reorder Ap.{cpp,h} &amp; reconcile with the internal version of AlgLib.
	―	Remade AE_LOCK_ALIGNMENT, AE_LOCK_CYCLES, AE_LOCK_TESTS_BEFORE_YIELD into integer contants local to Ap.cpp.
	―	Remade _ALGLIB_FLG_THREADING_MASK, _ALGLIB_FLG_THREADING_SHIFT as manifest constants local to Ap.cpp.
	―	The constants DynBottom, DynFrame made local in Ap.cpp
	―	ae_db_attach(), ae_break(), ae_optional_atomic_{add,sub}_i(), ae_yield(),
	 	x_is_symmetric(), x_is_hermitian(), x_force_symmetric(), x_force_hermitian(),
	 	aligned_extract_ptr(), ae_matrix_update_row_pointers(),
	 	ae_static_malloc(), ae_static_free(),
	 	ae_sixbits2char(), ae_char2sixbits(), ae_threebytes2foursixbits(), ae_foursixbits2threebytes()
		all made local to Ap.cpp.
	―	ae_never_change_it, _sixbits2char_tbl[], _ae_char2sixbits_tbl[] in Ap.cpp made local respectively to ae_spin_wait(), ae_sixbits2char() and _ae_char2sixbits().
	―	_ialglib_vzero(), _ialglib_vzero_complex(),
		_ialglib_vcopy(), _ialglib_vcopy_complex(), _ialglib_vcopy_dcomplex(),
		_ialglib_mcopyblock(), _ialglib_mcopyunblock(), _ialglib_mcopyblock_complex(), _ialglib_mcopyunblock_complex(),
	 	_ialglib_mv_32(), _ialglib_rmatrixger() made local in Ap.cpp,
	 	_ialglib_rmv(), _ialglib_rmatrixgemm(), _ialglib_rmatrixrighttrsm(), _ialglib_rmatrixlefttrsm(),
	 	_ialglib_cmv(), _ialglib_cmatrixgemm(), _ialglib_cmatrixrighttrsm(), _ialglib_cmatrixlefttrsm(),
	 	_ialglib_rmatrixsyrk(), _ialglib_rmatrixrank1(),
	 	_ialglib_cmatrixherk(), _ialglib_cmatrixrank1()
		all made local to Ap.cpp.
	― 	_dbg_alloc_total, _use_dbg_counters, _use_vendor_kernels
	  	debug_workstealing, dbgws_pushroot_ok, dbgws_pushroot_failed
		all made local in Ap.cpp.
	― 	x_nb, alglib_simd_alignment
	 	alglib_r_block, alglib_half_r_block/2, alglib_twice_r_block,
	 	alglib_c_block, alglib_half_c_block/2, alglib_twice_c_block
		all remade as ae_int_t constants.
	―	alglib::ByteOrder made local in Ap.cpp and commented out (it's not used).
	―	Combined the threading model names AE_{SERIAL_UNSAFE,SERIAL,PARALLEL}
		and flags _ALGLIB_FLG_THREADING_{USE_GLOBAL,SERIAL,PARALLEL} into {Non,Ser,Par}TH.
	―	Replaced the threading flag names "xdefault, "serial" and "parallel" respectively by NonTH, SerTH and ParTH.
	―	Removed x_string from Ap.h - it is not used anywhere.
		Removed ALIGNED from Ap.h - it is not used anywhere else, other than in x_string.
	―	CSV_DEFAULT, CSV_SKIP_HEADERS definitions in Ap.h moved to Ap.cpp and reduced in Ap.h to declarations.
	―	Removed ae_check_zeros(); placing, instead, the responsibility for zero-initialization into the constructor wrappers.
	―	Synthesized the constructor macro NewSerializer().
36	Second round of normalization of comments &amp; documentation: reduced the 4-fold redundancy in header-comments.
	―	For programmers maintaining/revising the library:
		header-comments for the high-level iteration routines and DefClass() definitions, for now, are left in the alglib namespace in *.cpp.
		header-comments are confined, in all other cases, to the implementation routines the alglib_impl namespace in *.cpp.
	―	For programmers using the API: a copy of the comments is in the manual section.
	First round of normalization of iteration routines.
	―	Made logit_{xtol,ftol,gtol,maxfev,stpmin,stpmax}, in DataAnalysis.cpp, local to logit_mnlmcsrch() and removed the logit_ prefix.
	―	Made linmin_{ftol,xtol,maxfev,defstpmax), in AlgLibInternal.cpp, local to mcsrch() and removed the linmin_ prefix.
	―	Merged the locals linmin_mcstep() in AlgLibInternal. and logic_mnlmcstep() in DataAnalysis.cpp into a global mcstep() in AlgLibInternal.{cpp,h}
	For parameter declarations:
	∙	For iteration and [un]serializer routines, the documented and declared versions match.
	∙	For the user-supplied functions in the iteration routines and their high-level versions, the documented and declared versions also match.
	∙	Output parameters X of type T are documented and declared respectively as:
		―	T &amp;X	⇔	T &amp;X
	∙	Input parameters X of type T are documented and declared respectively as:
		―	T X	⇔	const T X	― for scalar types T ∈ { bool, ae_int_t, double, complex },
		―	T X	⇔	const T &amp;X	― for all other types T.
	The documentation of the following 1D and 2D array argument parameters in Manual.htm was changed from output (T &amp;X) to input (T X) to match its declaration (const T &amp;X).
	∙	a	rmatrixenforcesymmetricity rmatrixger, spdmatrixcholeskyupdate{add1,fix}[buf], xdebug{b{1,2}not,{c,i,r}{1,2}neg}
	∙	b	rmatrix{[gen]copy,transpose}, {r,c}matrix[lu]solve[m]fast, rvectorcopy, {h,s}pdmatrix[cholesky]solve[m]fast
	∙	c	cmatrixherk, {r,c}matrix{gemm,syrk}
	∙	tmp	rmatrixsyvmv
	∙	x	{r,c}matrix{left,right}trsm, rmatrixtrsv, sparsetr{m,s}v
	∙	xy	rankdata[centered]
	∙	y	rmatrix[ge,sy]mv, sparsegemv
	The xy parameters in the reduced forms of rankdata[centered]() were changed to input, to match the declaration of xy in the full form.
	∙	void rankdata(real_2d_array &amp;xy);	⇒ void rankdata(const real_2d_array &amp;xy);
	∙	void rankdatacentered(real_2d_array &amp;xy);	⇒ rankdatacentered(const real_2d_array &amp;xy);
	Other minor changes in the documentation &amp; Comments:
	∙	sparsesmm(): A is M × K, not N × K.
	∙	sparsecholeskyskyline(): "matrixm" → "matrix"
37	Recoding of internal and non-API routines.
	∙	AlgLibInternal.{cpp,h}: swapb(), swapc() added.
		―	swap{b,i,r,c}() synthesized in numerous places.
		―	Non-API routine mcsrch(): Redeclared "double *f" as an input-only parameter "double f".
		―	Non-API routine tiledsplit(tasksize, tilesize, &amp;task0, &amp;task1)
			redefined as task0 = tiledsplit(tasksize, tilesize), task1 = tasksize - task0;
		―	Non-API routine splitlength(tasksize, chunksize, &amp;task0, &amp;task1)
			redefined as task0 = splitlength(tasksize, chunksize), task1 = tasksize - task0;
		―	Non-API routine splitlengtheven(tasksize, &amp;task0, &amp;task1)
			redefined as task0 = splitlengtheven(tasksize), task1 = tasksize - task0;
		―	Non-API routine sortmiddlei() removed and replaced by its duplicate tagsortmiddlei() [newly added to version 3.17.0].
		―	Non-API routines tagsortmiddleir(), tagsortmiddlei() redeclared with default offset = 0, and recoded.
			Declarations changed from tagsortmiddlei*(a, b, offset, n) to tagsortmiddlei*(a, b, n, offset = 0).
		―	Non-API routines tagsortfast[ir]() recoded.
		―	Local routines tsort_tagsortfast[ir]rec() recoded.
		―	Local routine tsort_tagsortfastirec(a, b, bufa, bufb, i1, i2)
			redefined as tsort_tagsortfastirec(a-&gt;xR + i1, b-&gt;xZ + i1, bufa-&gt;xR + i1, bufb-&gt;xZ + i1, i2 - i1 + 1)
		―	Local routine tsort_tagsortfastrrec(a, b, bufa, bufb, i1, i2)
			redefined as tsort_tagsortfastrrec(a-&gt;xR + i1, b-&gt;xR + i1, bufa-&gt;xR + i1, bufb-&gt;xR + i1, i2 - i1 + 1)
		―	Local routine tsort_tagsortfastrec(a, bufa, i1, i2)
			redefined as tsort_tagsortfastrec(a-&gt;xR + i1, bufa-&gt;xR + i1, i2 - i1 + 1)
		―	Localized static constant linmin_armijofactor to the routine it is used in,
			and removed the "linmin_" prefix.
		―	All of the routines in the FTBASE package were recoded.
		―	Non-API routine ftapplyplan(&amp;plan, &amp;buf, offset, reps) redeclared with default offset = 0 and reps = 1, and recoded.
		―	Local routines ftbase_ftpushentry{2,4}() combined with ftbase_ftpushentry() by making defaults eparam1 = -1, eparam2 = 0, eparam3 = 0.
		―	Local routine(s) ftbase_ftpushentry*(plan, &hellip;) redefined as ftbase_ftpushentry*(&amp;plan-&gt;entries, &hellip;).
		―	Local routine ftbase_fftirltrec(a, astart, astride, b, bstart, bstride, m, n)
			redefined as ftbase_fftirltrec(a-&gt;xR + astart, astride, b-&gt;xR + bstart, bstride, m, n).
		―	Local routine ftbase_ffticltrec(a, astart, astride, b, bstart, bstride, m, n)
			redefined as ftbase_ffticltrec(a-&gt;xR + astart, astride, b-&gt;xR + bstart, bstride, m, n).
		―	Local routine ftbase_internalcomplexlintranspose(a, n, m, astart, buf)
			redefined as ftbase_internalcomplexlintranspose(a-&gt;xR + astart, n, m, buf).
		―	Local routine ftbase_ftapplycomplexcodelettwfft(a, offs, args, n, mun)
			redefined as ftbase_ftapplycomplexcodelettwfft(a-&gt;xR + offs, args, n, mun).
		―	Local routine ftbase_ffttwcalc(a, aoffset, n1, n2)
			redefined as ftbase_ffttwcalc(a-&gt;xR + aoffset, n1, n2).
		―	Local routine ftbase_ftapplycomplexreffft(a, offs, args, n, mun, buf)
			redefined as ftbase_ftapplycomplexreffft(a-&gt;xR + offs, args, n, buf).
			The mun == 2 assertion is placed outside and before the call.
		―	Local routine ftbase_ftapplycomplexcodeletfft(a, offs, args, n, mun)
			redefined as ftbase_ftapplycomplexcodeletfft(a-&gt;xR + offs, args, n).
			The mun == 2 assertion is placed outside and before the call.
		―	Local routine ftbase_ftbluesteinsfft(plan, a, abase, aoffset, ⋯, bufa, bufb, bufc, bufd)
			redefined as ftbase_ftbluesteinsfft(plan, a-&gt;xR + abase + aoffset, ⋯, bufa, bufc).
		―	Local routine ftbase_ftradersfft(plan, a, abase, aoffset, ⋯, buf)
			redefined as ftbase_ftradersfft(plan, a-&gt;xR + abase + aoffset, aoffset, ⋯, buf).
		―	Local routine ftbase_ftapplysubplan(plan, subplan, a, abase, aoffset, buf, repcnt)
			redefined as ftbase_ftapplysubplan(plan, subplan, a-&gt;xR + abase + aoffset, aoffset, buf, repcnt).
		―	Local routine ftbase_ftprecomputebluesteinsfft(n, m, precr, offs)
			redefined as ftbase_ftprecomputebluesteinsfft(n, m, precr-&gt;xR + offs).
		―	Local routine ftbase_ftprecomputeradersfft(n, rq, riq, precr, offs)
			redefined as ftbase_ftprecomputeradersfft(n, rq, riq, precr-&gt;xR + offs).
	∙	AlgLibMisc.cpp:
		―	Local routine nearestneighbor_kdtreesplit()
			redefined with the output-only parameter "ae_int_t *i3" remade a return value.
		―	Synthesized new API routine hqrndmiduniformr() = 2 hqrnduniformr() - 1.
	∙	DataAnalysis.cpp:
		―	Local routine logit_mnlmcsrch(): Redeclared "double *f" as an input-only parameter "double f".
		―	Local boolean routine ssa_hassomethingtoanalyze(): reversed, renamed ssa_isdegenerate() and recoded.
	∙	Statistics.{cpp,h}:
		―	Local routine wsr_wcheb() eliminated and substituted into wsr_w{25,26,...,200}(), wsr_wsigma() recoded.
		―	wsr_w*() recoded.
		―	Local routine jarquebera_jarqueberastatistic() eliminated and substituted into jarqueberatest(),
			and jarqueberatest() recoded.
		―	Local routine jarquebera_jbcheb() eliminated and substituted into jarquebera_jbtbl*(),
			and jarquebera_jbtbl*() recoded.
		―	Local routine jarquebera_jarqueberaapprox() recoded.
		―	API routine jarqueberatest() recoded.
		―	Local routines correlationtests_spearmantail{5,6,7,8,9}() eliminated and substituted into correlationtests_spearmantail(),
			and correlationtests_spearmantail() recoded.
	∙	SpecialFunctions.{cpp,h}:
		―	Recoded sinecosineintegrals().
		―	Local routine trigintegrals_chebiterationshichi() eliminated and substituted into hyperbolicsinecosineintegrals(),
			hyperbolicsinecosineintegrals() recoded.
		―	Local routines bessel_besselm{first,next}cheb() eliminated and substituted into besseli0().
		―	Local routines bessel_besselm1{first,next}cheb() eliminated and substituted into besseli1(), besselk0(), besselk1().
		―	Local routines bessel_besselasympt{0,1}(x, ⋯) recoded and redefined as bessel_besselasympt{0,1}(8.0/x, ⋯).
		―	API routines besseli{0,1}(), bessel{j,y,k}{0,1,n}() recoded.
		―	Synthesized internal constants for the Euler constant, π/2 and √2.
		―	Synthesized local routines erfr0(), erfr1() and recoded errorfunction[c](), normal{cdf,distribution}() using them to remove recursive calls.
		―	Synthesized local routines inverfr0(), inverfr1(), inverfr2() and recoded invnormal{cdf,distribution}() and inverf() using them.
	∙	Optimization.cpp:
		―	optserv_feasibilityerrorgrad(): remade "double *err" into a return value.
		―	localized most static constants that are used in only one routine to the routines they are used in,
			and removed the prefixes (e.g. cqmodels_newtonrefinementits → newtonrefinementits).
	∙	Solvers.{cpp,h}:
		―	lincgsetb() added to the API.
	∙	LinAlg.{cpp,h}:
		―	rmatrix{transpose,copy}(): removed "const" from "real_2d_array &amp;b" to match "b" in cmatrix{transpose,copy}().
		―	rmatrixmv(): removed "const" from "real_1d_array &amp;y" to match "y" in cmatrixmv().
		―	Non-API routine rmatrixqrbasecase() removed from LinAlg.h, made local to LinAlg.cpp, renamed ortfac_rmatrixqrbasecase().
		―	Non-API routine spdmatrixcholeskyinverserec() removed from LinAlg.h, made local to LinAlg.cpp, renamed matinv_spdmatrixcholeskyinverserec().
		―	Non-API routine ablascomplexsplitlength(a, n, &amp;n1, &amp;n2) redefined as n1 = ablascomplexsplitlength(a, n), n2 = n - n1;
		―	Non-API routine ablassplitlength(a, n, &amp;n1, &amp;n2) redefined as n1 = ablassplitlength(a, n), n2 = n - n1;
		―	Local routine ablas_ablasinternalsplitlength(n, nb, &amp;n1, &amp;n2) redefined as n1 = ablas_ablasinternalsplitlength(n, nb), n2 = n - n1;
	∙	Manual.htm:
		―	rmatrix{transpose,copy}(): redeclared b an output parameter, to match the declaration on cmatrix{transpose,copy}().
		―	rmatrixmv(): redeclared y an output parameter, to match the declaration in cmatrixmv().
		―	lincgsetb(): added to the API and newly documented.
		―	hqrndmiduniformr(): added to the API and newly documented.
		―	ssaforecastsequence() documentation: the Data parameter is array[DataLen], not array[NTicks].
	∙	Interpolation.cpp:
		―	Local routine spline1d_diffthreepoint() in-line substituted into spline1dbuildakima() and removed,
			and spline1dbuildakima() recoded.
		―	localized most static constants that are used in only one routine to the routines they are used in,
			and removed the prefixes (e.g. spline1d_lambdareg → lambdareg).
		―	spline3d_spline3ddiff(): remade "double *fx", "double *fy", "double *fxy" into optional output parameters.
		―	spline1dconvdiffinternal():
			remade the non-API routine into static local.
			remade "RVector *y", "RVector *d1", "RVector *d2" into optional output parameters.
			eliminated "bool needy", "bool needd1", "bool needd2" respectively in favor of (y != NULL), (d1 != NULL) and (d2 != NULL).
		―	spline1d_spline1dgriddiffcubicinternal():
			removed "RVector *dt", it's not used by any of routine's callers,
			replaced its use inside the routine by d, since it was copied to d after being assigned to.
		―	rbf_clearreportfields(): removed and inserted inline at its point of use.
38	Integration of version 3.17.0.
	Minor corrections in TestC.cpp:
	∙	Removed duplicate initialization of x in the &quot;Test CG solver&quot; loop of testfbls().
	∙	Dangling references to &quot;isupper&quot; in sparserealcholeskytest() resolved.
	∙	Dangling reference to &quot;solvertype&quot; in testminlpunit_singlecalltests() resolved.
39	Integration of version 3.18.0.
	Replaced the ‟Local” #define in Test.cpp by ‟static”.
	Ap.{cpp,h}: Uniformized the translator-generated names across namespaces:
	―	ae_machineepsilon → machineepsilon, ae_pi → pi,
	―	ae_maxrealnumber → maxrealnumber, ae_minrealnumber → minrealnumber,
	―	ae_c_abs → abscomplex, ae_complex → complex, ae_c_conj → conj, ae_c_sqr → csqr,
	―	ae_sign → sign, ae_sqr → sqr,
	―	ae_iceil → iceil, ae_ifloor → ifloor, ae_round → round, ae_trunc → trunc,
	―	ae_maxreal → maxreal, ae_minreal → minreal,
	―	ae_maxint → maxint, ae_minint → minint,
	―	ae_get_cores_to_use → getnworkers, ae_set_cores_to_use → setnworkers, ae_set_error_flag → set_error_flag,
	―	ae_randommid → randommid, ae_randomreal → randomreal,
	―	ae_randombool → randombool, ae_randominteger → randominteger,
	―	ae_tickcount → tickcount,
	Simplified the ‟class” declaration macros, removing EndD and AndD.
	Normalized the typecasts ― removing redundant typecasts, and normalized the layout of the others.
</pre>
</p>
<p>
<a name=supp_History3 class=sheader></a><h3>A6.3. Test Results</h3>
The following are the read-outs from TestX, followed by the time-stamp and total testing time from TestC.
The values cited for TestX are for MFLOPS counts for the RGEMM BLAS routine for N&times;N matrices for N = 16, 32, 64 and 1024.
The times, themselves are meaningful only for comparisons on a single host, rather than across different hosts.
In the case of TestX, not all tests were done cleanly (i.e. with background processes disabled), so there may be fluctuations.
<pre class=narration>
01	1555 1946 1958 1875 1552948070 (5c901b66) 232
01	1550 1946 1946 1856
02	1580 1934 1939 1868 1552948674 (5c901dc2) 248
02	1577 1931 1946 1839 1552949228 (5c901fec) 250 // First-restructured version.
02	1550 1938 1946 1861
02	1536 1934 1950 1864
02	1582 1942 1946 1865
02	1563 1938 1935 1864
02	1548 1934 1946 1860
04	1553 1938 1946 1849
04	1558 1949 1954 1874
04	1587 1931 1924 1878
02	1572 1938 1942 1867 1553095988 (5c925d34) 245 // Started over
02	1529 1938 1946 1872
02	1567 1931 1916 1859
03	1580 1949 1950 1873 1553098036 (5c926534) 233
03	1560 1949 1950 1861
03	1548 1946 1950 1858
04	1538 1934 1946 1874 1553099012 (5c926904) 225
04	1531 1938 1942 1865
04	1572 1934 1946 1868
05	1565 1938 1939 1856 1553309815 (5c95a077) 211
06	1587 1949 1946 1873
06	1590 1949 1942 1855 1553329021 (5c95eb7d) 204
07	1590 1946 1942 1846 1553357985 (5c965ca1) 206
08	1473 1916 1931 1853
08	1522 1934 1946 1853
08	1575 1938 1942 1846
09	1582 1942 1946 1834
10	1582 1949 1958 1882 1553372412 (5c9694fc) 205
11	1541 1869 1950 1865 1553382833 (5c96bdb1) 208 // Run with the network active.
11	1560 1942 1942 1855 // Run with the network active.
12	1590 1931 1954 1855
13	1558 1938 1958 1881 // TestZ "fails" because the conditions underlying a part of it have changed.
13	1585 1946 1939 1847 1553450728 (5c97c6e8) 203 // Skipped TestZ.
13	1590 1953 1958 1876 1553454094 (5c97d40e) 200 // Skipped TestZ.
14	1563 1931 1946 1867 1553457101 (5c97dfcd) 197 // TestZ was changed to reflect the new conditions.
14	1590 1953 1958 1853 1553460998 (5c97ef06) 208
14	1560 1946 1950 1859 // Added the ConstT() and TryX macros.
15	1590 1949 1954 1876 1553475423 (5c98275f) 204 // Run with the network active.
16	1553 1934 1942 1861 1553501003 (5c988b4b) 201 // Added the TryCatch macro.
17	1575 1934 1946 1844 1553510964 (5c98b234) 203 // Added the New*, Ref*, Dup* macros.
18	1572 1931 1946 1867 1553517390 (5c98cb4e) 205 // Removed the FP comparison macros.
18	1543 1942 1950 1868 1553550000 (5c994ab0) (15535?????) 205 // Regularized the layout of the modules.
19	1527 1923 1942 1842 // Reformatted the RCOMM routines and [logit_]mcsrch.
19	1543 1905 1939 1865 1553672842 (5c9b2a8a) 200 // 11 TestC tests fail with the revisions.
19	1541 1942 1950 1867 1553681461 (5c9b4c35) 201 // Corrected.
19	1565 1923 1939 1849
20	1541 1939 1942 1867 1553708554 (5c9bb60a) 200
21	1575 1942 1913 1866 1553731148 (5c9c0e4c) 220
22	1595 1916 1954 1879
22	1548 1942 1946 1895 1553905444 (5c9eb724) 199
22	1577 1946 1946 1897 // Minor correction in TestX.cpp.
23	1585 1949 1946 1890 1553932849 (5c9f2231) 199
24	2268 3585 3510 3278 // With -mtune=core2 and -msse2. The machine's cooling fan was activated during the test.
24	2227 3497 3323 3264 // Dropped -mtune=core2 but kept -msse2.
24	2208 3472 3461 3238 1554065184 (5ca12720) 207
24	2208 3485 3461 3307 1554066501 (5ca12c45) 203 // The bugs in the dforest module and tester were repaired.
24	2242 3485 3473 3277 1555921305 (5cbd7999) 205
25	2283 3559 3498 3279 1557611349 (5cd74355) 203
25	2283 3534 3510 3235 1580240643 (5e308f03) 212 // Final fixes in preparation for upgrade to 3.16.0.
25	2299 3559 3510 3243 1580249792 (5e30b2c0) 204 // Final fixes in preparation for upgrade to 3.16.0.
25	2268 3521 3498 3287 1580340998 (5e321706) 200 // Final test of Version 3.15.0.
30	2257 3534 3486 3279 1581358777 (5e419eb9) 202 // Final test of Version 3.15.0 with retrofits.
26	2146 3402 3486 3230 1580248905 (5e30af49) 220 // Version 3.16.0.
26	2294 3449 3522 3247 1580273645 (5e310fed) 212
26	2273 3534 3461 2865 1580343048 (5e321f08) 213
26	2299 3472 3486 3252 1580940186 (5e3b3b9a) 225
27	2257 3509 3449 3262 1581001359 (5e3c2a8f) 218
28	2278 3497 3510 3253 1581027835 (5e3c91fb) // 5 TestC tests failed.
28	2268 3497 3498 3205 1581032293 (5e3ca365) 222 // Corrected.
28	2294 3485 3498 3271 1581033702 (5e3ca8e6) 228 // Modifications, following cross-validation against local version.
29	2268 3460 3461 3193 1581111823 (5e3dda0f) 230 // 1 TestC test failed.
29	2294 3472 3498 3237 1581112921 (5e3dde59) 215 // Corrected.
29	2268 3559 3498 3248 1581201426 (5e3f3812) 234 // Modifications, following cross-validation against local version.
30	2268 3472 3498 3235 1581312636 (5e40ea7c) 213
30	2278 3413 3498 3241 1581556573 (5e44a35d) 216
30	2273 3509 3510 3261 1581634496 (5e45d3c0) 220
30	2299 3437 3486 3262 1581731061 (5e474cf5) 217
30	2283 3437 3414 3240 1581740396 (5e47716c) 224 // Modifications, following cross-validation against local version.
31	2283 3472 3510 3241 1581968963 (5e4aee43) 216
31	2262 3472 3486 3235 1581983401 (5e4b26a9) 209
32	2268 3485 3498 3208 1582670816 (5e55a3e0) 218 // 1 TestC test failed.
32	2257 3572 3498 3246 1582673449 (5e55ae29) 214 // Corrected.
32	2252 3413 3473 3200 1582847620 (5e585684) 213
32	2273 3379 3486 3184 1582951824 (5e59ed90) 225 // 1 TestC test "failed" due to a hidden bug in TestC.cpp inherited from ALGLIB. Corrected.
32	2222 3356 3438 3266 1583163421 (5e5d281d) 226
32	2242 3356 3473 3238 1583193341 (5e5d9cfd) 216
32	2232 3379 3473 3229 1583267567 (5e5ebeef) 210
33	2262 3367 3473 3218 1583609500 (5e63f69c) 220
33	2288 3460 3510 3217 1583795111 (5e66cba7) 218
33	2278 3497 3510 3279 1583852957 (5e67ad9d) 227
34	2288 3521 3500 3274 1583869463 (5e67ee17) // Ended early to make a last-minute change to the display format of TestC.cpp.
34	2262 3413 3510 3248 1583869582 (5e67ee8e) 218
34	2278 3521 3510 3245 1586305481 (5e8d19c9) 213 // Resumed from a temporary suspension, bunkering down to await the passing of a worldwide plague.
35	2278 3402 3449 3266 1589855728 (5ec345f0) 221 // Minor changes, following reconciliation with the main (and internal) branch of ALGLIB++.
35	2252 3485 3510 3265 1592593244 (5eed0b5c) 234
35	2198 3460 3438 3262 1593720351 (5efe3e1f) 223
35	2262 3413 3426 3282 1593794381 (5eff5f4d) 217
35	2294 3449 3498 3287 1593905439 (5f01111f) 212
36	2326 3449 3510 3289 1594326522 (5f077dfa) 226
36	2315 3460 3498 3282 1594410366 (5f08c57e) 219
36	2320 3390 3498 3279 1594701863 (5f0d3827) 214
36	2288 3437 3486 3297 1594955177 (5f1115a9) 213
36	2283 3534 3510 3271 1595472599 (5f18fad7) 219
36	2288 3485 3486 3255 1596334058 (5f261fea) 218
36	2294 3449 3426 3278 1596496519 (5f289a87) 218
37	2310 3472 3498 3282 1601204686 (5f7071ce) // 6 TestC tests failed, 4 stalled and 4 crashed, 1 sporadic failure (minqp).
37	2283 3367 3449 3250 1601325526 (5f7249d6) 229 // Corrected. Sporadic failures in minqp exist, found to have been inherited from ALGLIB.
37	2315 3509 3498 3276 1601836904 (5f7a1768) 227
37	2310 3497 3498 3282 1602025944 (5f7cf9d8) 214
37	2273 3402 3486 3260 1602621006 (5f860e4e) 222
37	2283 3449 3449 3262 1611556223 (600e657f) 218 // Final test of version 3.16.0 in preparation for update to 3.17.0.
38	2183 3413 3486 3262 1611557399 (600e6a17) 218 // Updated everything except LinAlg, Solvers, Optimization, TestI, TestC.
38	2288 3497 3461 3243 1611601185 (600f1521) 217
38	2315 3449 3498 3237 1611605209 (600f2429) 223 // Updating LinAlg, Solvers, TestI; TestC tests trfac:SPD(Sparse), directsparsesolvers:SPD-CRS(real) failed.
38	2283 3460 3510 3280 1611695289 (601084b9) 216 // Fixed. Updated LinAlg, Solvers, TestI.
38	2283 3472 3438 3243 1611721115 (6010e99b) 220 // Updated TestC except the minqp and minlp testing units.
38	2299 3472 3510 3285 1611721972 (6010ecf4) 206 // Updating Optimization, TestC: minlp:{Basic Tests, Single Call Usage}, minnlc:OptGuard Integrity Monitor failed.
38	2278 3413 3473 3271 1611802319 (601226cf) // minlp, minnlc failed; Ended early. Further upgrades to TestC pending.
38	2283 3534 3510 3252 1612840998 (60220026) 235 // Failures corrected. Further updates to 3.17.0 integrated into TestC.
38	2310 3413 3486 3284 1612909655 (60230c57) 234 // Completed update of TestC.
38	2273 3425 3461 3257 1613188134 (60274c26) 245 // Final upgrades to code, documentation and comments.
38	2299 3472 3510 3254 1613195786 (60276a0a) 232 // Corrections made to TestC to fix minor problems inherited from ALGLIB.
38	1934 3135 3237 2868 1623033790 (60bd87be) 198 // Tests resumed, following updates to the local system &amp; compiler (to GCC version 11.1.1).
38	3571 5525 5684 4897 1624304616 (60d0ebe8) 84 // Testing on System B.
38	5181 7937 8003 7185 1635364271 (6179adaf) 75 // Minor modifications to hqrnd.
39	5405 0.9x 7463 1.1x 8336 1.0x 7351 1.0x 1635575856 (617ce830) 72 // Reordering sub-packages &amp; tests in TestI.cpp to match 3.18.0.
39	5495 1.0x 8265 1.0x 8477 1.0x 7155 1.0x 1637092621 (61940d0d) 79 // Simplifications in Ap.{cpp,h}.
39	5435 1.0x 8404 1.0x 8477 1.0x 7132 0.9x 1637109709 (61944fcd) 77 // Reordering testing units in TestC.cpp to match 3.18.0.
39	5495 1.0x 8197 1.0x 8477 1.0x 7434 0.9x 1637448064 (61997980) 76 // Partial upgrades: TestX.cpp, Ap.h.
39	5495 1.0x 8197 1.0x 8550 1.0x 7463 1.0x 1637890616 (61a03a38) 75 // Simplifications Ap.h.
39	4673 1.0x 7519 1.1x 8406 1.0x 7228 1.0x 1638957669 (61b08265) 74 // Minor fixes in Ap.{cpp,h} to better match 3.18.0.
39	5465 0.9x 7875 1.0x 8406 0.9x 7258 1.0x 1639362698 (61b6b08a) 82 // Minor fixes in TestX.cpp.
</pre>
</p>
</div>
</body>
</html>
