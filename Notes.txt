A4. ALGLIB++ Package Dependencies
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
AlgLibInternal:
	APSERV:
	ABLASF:
	HBLAS:
	CREFLECTIONS:
	SBLAS: APSERV
	ABLASMKL:
	SCODES:
	TSORT: APSERV
	BLAS:
	ROTATIONS:
	BASICSTATOPS: TSORT
	TRLINSOLVE:
	SAFESOLVE:
	XBLAS:
	LINMIN:
	NEARUNITYUNIT:
	NTHEORY:
	FTBASE: APSERV NTHEORY
	HPCCORES:
AlgLibMisc: AlgLibInternal
	HQRND: (AlgLibInternal) APSERV ABLASF
	XDEBUG:
	NEARESTNEIGHBOR: (AlgLibInternal) SCODES TSORT
DiffEquations: AlgLibInternal
	ODESOLVER: (AlgLibInternal) APSERV
FastTransforms: AlgLibInternal
	FFT: (AlgLibInternal) FTBASE
	FHT: FFT
	CONV: FFT
	CORR: CONV
SpecialFunctions: AlgLibMisc [AlgLibInternal]
	GAMMAFUNC:
	NORMALDISTR: (AlgLibMisc) HQRND
	IBETAF: GAMMAFUNC NORMALDISTR
	STUDENTTDISTR: IBETAF
	FDISTR: IBETAF
	IGAMMAF: GAMMAFUNC NORMALDISTR
	CHISQUAREDISTR: IGAMMAF
	BINOMIALDISTR: (AlgLibInternal) NEARUNITYUNIT │ IBETAF
	EXPINTEGRALS:
	JACOBIANELLIPTIC:
	TRIGINTEGRALS:
	CHEBYSHEV:
	POISSONDISTR: IGAMMAF
	BETAF: GAMMAFUNC
	FRESNEL:
	PSIF:
	AIRYF:
	DAWSON:
	HERMITE:
	LEGENDRE:
	BESSEL:
	LAGUERRE:
	ELLIPTIC:
LinAlg: AlgLibMisc [AlgLibInternal]
	ABLAS: (AlgLibInternal) APSERV ABLASF ABLASMKL
	ORTFAC: (AlgLibInternal) HBLAS CREFLECTIONS SBLAS │ (AlgLibMisc) HQRND │ ABLAS
	MATGEN: (AlgLibInternal) CREFLECTIONS │ (AlgLibMisc) HQRND │ ABLAS
	SPARSE: (AlgLibInternal) ABLASMKL SCODES TSORT │ (AlgLibMisc) HQRND
	HSSCHUR: (AlgLibInternal) BLAS ROTATIONS │ ABLAS
	EVD: (AlgLibInternal) BASICSTATOPS │ ORTFAC MATGEN SPARSE HSSCHUR
	DLU: ABLAS
	SPTRF: SPARSE DLU
	AMDORDERING: ABLAS SPARSE
	SPCHOL: AMDORDERING
	TRFAC: (AlgLibInternal) ROTATIONS │ MATGEN SPTRF SPCHOL
	BDSVD: (AlgLibInternal) ROTATIONS │ (AlgLibMisc) HQRND │ ABLAS
	SVD: (AlgLibInternal) BLAS │ ORTFAC BDSVD
	RCOND: (AlgLibInternal) TRLINSOLVE SAFESOLVE │ TRFAC
	FBLS: (AlgLibInternal) ROTATIONS │ ORTFAC
	NORMESTIMATOR: MATGEN SPARSE
	MATINV: RCOND
	INVERSEUPDATE:
	SCHUR: ORTFAC HSSCHUR
	SPDGEVD: EVD MATINV
	MATDET: TRFAC
Integration: LinAlg SpecialFunctions
	GQ: (SpecialFunctions) GAMMAFUNC │ (LinAlg) EVD
	GKQ: GQ
	AUTOGK: GKQ
Solvers: LinAlg [AlgLibInternal]
	POLYNOMIALSOLVER: (LinAlg) EVD TRFAC
	DIRECTDENSESOLVERS: (AlgLibInternal) XBLAS │ (LinAlg) SVD RCOND
	DIRECTSPARSESOLVERS: (LinAlg) TRFAC
	ITERATIVESPARSE: (LinAlg) FBLS │ DIRECTSPARSESOLVERS
	LINCG: (LinAlg) MATGEN SPARSE
	LINLSQR: (LinAlg) SVD NORMESTIMATOR
	NLEQ: (AlgLibInternal) LINMIN │ (LinAlg) FBLS
Statistics: LinAlg SpecialFunctions [AlgLibInternal AlgLibMisc]
	BASESTAT: (AlgLibInternal) BASICSTATOPS │ (LinAlg) ABLAS
	CORRELATIONTESTS: (SpecialFunctions) STUDENTTDISTR │ BASESTAT
	JARQUEBERA:
	VARIANCETESTS: (SpecialFunctions) FDISTR CHISQUAREDISTR
	WSR: (AlgLibInternal) APSERV
	MANNWHITNEYU: (AlgLibMisc) HQRND
	STEST: (SpecialFunctions) BINOMIALDISTR
	STUDENTTTESTS: (SpecialFunctions) STUDENTTDISTR
Optimization: Solvers [AlgLibInternal LinAlg]
	OPTGUARDAPI: (AlgLibInternal) APSERV
	OPTSERV: (LinAlg) SVD MATINV │ OPTGUARDAPI
	MINLBFGS: (AlgLibInternal) LINMIN │ (LinAlg) FBLS │ OPTSERV
	CQMODELS: (LinAlg) TRFAC FBLS
	LPQPSERV: (LinAlg) SPARSE
	SNNLS: (LinAlg) TRFAC FBLS
	SACTIVESETS: OPTSERV SNNLS
	QQPSOLVER: CQMODELS SACTIVESETS
	QPDENSEAULSOLVER: (Solvers) DIRECTDENSESOLVERS LINLSQR │ MINLBFGS LPQPSERV QQPSOLVER
	MINBLEIC: (AlgLibInternal) LINMIN │ CQMODELS SACTIVESETS
	QPBLEICSOLVER: MINBLEIC
	VIPMSOLVER: (Solvers) DIRECTDENSESOLVERS │ MINLBFGS CQMODELS LPQPSERV
	MINQP: QPDENSEAULSOLVER QPBLEICSOLVER VIPMSOLVER
	MINLM: MINQP
	MINCG: (AlgLibInternal) LINMIN │ OPTSERV
	NLCSQP: VIPMSOLVER
	LPQPPRESOLVE: (LinAlg) SPARSE
	REVISEDDUALSIMPLEX: (LinAlg) TRFAC │ LPQPPRESOLVE
	MINLP: VIPMSOLVER REVISEDDUALSIMPLEX
	NLCSLP: (AlgLibInternal) LINMIN │ OPTSERV REVISEDDUALSIMPLEX
	MINNLC: MINBLEIC NLCSQP NLCSLP
	MINNS: MINBLEIC
	MINCOMP: MINLBFGS MINBLEIC
	MINBC: (AlgLibInternal) LINMIN │ OPTSERV
	OPTS: MINLP
Interpolation: Integration Optimization [AlgLibInternal AlgLibMisc LinAlg Solvers]
	RATINT: (AlgLibInternal) TSORT
	IDW: (AlgLibMisc) HQRND NEARESTNEIGHBOR │ (LinAlg) ABLAS
	INTFITSERV: (LinAlg) TRFAC
	POLINT: RATINT
	SPLINE1D: (LinAlg) FBLS │ (Solvers) LINLSQR │ INTFITSERV
	LSFIT: (Optimization) MINLM │ POLINT SPLINE1D
	FITSPHERE: (Optimization) MINLM MINNLC
	PARAMETRIC: (Integration) AUTOGK │ SPLINE1D
	RBFV1: (AlgLibMisc) NEARESTNEIGHBOR │ LSFIT
	SPLINE2D: SPLINE1D
	RBFV2: (AlgLibMisc) NEARESTNEIGHBOR │ LSFIT
	SPLINE3D: SPLINE1D
	INTCOMP: SPLINE1D FITSPHERE
	RBF: RBFV1 RBFV2
DataAnalysis: Optimization [AlgLibInternal AlgLibMisc LinAlg Solvers SpecialFunctions]
	PCA: (LinAlg) EVD SVD │ (Statistics) BASESTAT
	BDSS: (Statistics) BASESTAT
	MLPBASE: (AlgLibInternal) HPCCORES │ (LinAlg) SPARSE │ BDSS
	MLPE: MLPBASE
	CLUSTERING: (AlgLibInternal) BLAS │ (AlgLibMisc) HQRND │ (Statistics) BASESTAT
	DFOREST: (AlgLibInternal) SCODES │ (AlgLibMisc) HQRND │ BDSS
	LINREG: (SpecialFunctions) IGAMMAF │ (LinAlg) SVD │ (Statistics) BASESTAT
	FILTERS: LINREG
	SSA: (LinAlg) EVD SVD
	LDA: (LinAlg) EVD MATINV
	MCPD: (Optimization) MINBLEIC
	LOGIT: (Solvers) DIRECTDENSESOLVERS │ MLPBASE
	KNN: (AlgLibMisc) HQRND NEARESTNEIGHBOR │ BDSS
	MLPTRAIN: (Solvers) DIRECTDENSESOLVERS │ (Optimization) MINLBFGS │ MLPE
	DATACOMP: CLUSTERING
TestC, TestI: DataAnalysis DiffEquations FastTransforms Interpolation
TestX: DataAnalysis Interpolation
TestZ: Interpolation
TestY: LinAlg

A5. ALGLIB Commercial and Free Versions: Notes
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
For those who wish to use the improvements provided by the Commercial version of ALGLIB,
the following is a list of the routines in ALGLIB that have been provided with enhancements there;
along with the corresponding notifications.

Multi-threading support for ALGLIB++, in place of that provided by the commercial version, is currently being developed.
In addition, some enhancements, which have been made available for the free edition of ALGLIB, are inherited by ALGLIB++.

There are 6 groups of routines (labeled A, B, C, D, E and F), based on which parts of which notifications apply to them.

A5.1. ALGLIB Commercial and Free Notifications
──────────────────────────────────────────────
ABCDEF	│ COMMERCIAL EDITION OF ALGLIB:
ABCDEF	│
AB――――	│ Commercial version of ALGLIB includes one important improvement of this function, which can be used from C++ and C#:
――CDEF	│ Commercial Edition of ALGLIB includes following important improvements of this function:
AB――――	│ ∙ Intel MKL support (lightweight Intel MKL is shipped with ALGLIB)
――CDEF	│ ∙ high-performance native backend with same C# interface (C# version)
―――DEF	│ ∙ multithreading support (C++ and C# versions)
――C―EF	│ ∙ hardware vendor (Intel) implementations of linear algebra primitives (C++ and C# versions, x86/x64 platform)
ABCDEF	│
AB――――	│ Intel MKL gives approximately constant (with respect to number of worker threads)
AB――――	│ acceleration factor which depends on CPU being used,
AB────	│ problem size and "baseline" ALGLIB edition which is used for comparison.
AB――――	│
A―――――	│ Generally, commercial ALGLIB is several times faster than open-source generic C edition,
A―――――	│ and many times faster than open-source C# edition.
A―――――	│
AB――――	│ Multithreaded acceleration is NOT supported for this function.
ABCDEF	│
ABCDEF	│ We recommend you to read 'Working with commercial version' section of ALGLIB Reference Manual
ABCDEF	│ in order to find out how to use performance-related features provided by commercial edition of ALGLIB.

―――――F	│ FREE EDITION OF ALGLIB:
―――――F	│
―――――F	│ Free Edition of ALGLIB supports following important features for this function:
―――――F	│ ∙ C++ version: x64 SIMD support using C++ intrinsics
―――――F	│ ∙ C# version: x64 SIMD support using NET5/NetCore hardware intrinsics
―――――F	│ We recommend you to read 'Compiling ALGLIB' section of the ALGLIB Reference Manual
―――――F	│ in order to find out how to activate SIMD support in ALGLIB.

A5.2. ALGLIB Commercial Support and Free Enhancements by Routine
────────────────────────────────────────────────────────────────
The routines, by group, are:
A:	rmatrixbdsvd,
B:	rmatrixschur,
C:	hmatrixevd, hmatrixtd, hmatrixtdunpackq,
	rmatrixbd, rmatrixbdmultiplybyq, rmatrixbdunpackq, rmatrixevd, rmatrixhessenberg, rmatrixhessenbergunpackq, rmatrixsvd,
	smatrixevd, smatrixevdr, smatrixtd, smatrixtdevd, smatrixtdunpackq,
D:	dfbuilderbuildrandomforest, idwbuildercreate, knnbuilderbuildknnmodel,
	mlpallerrorssparsesubset, mlpallerrorssubset,
	mlpavgce, mlpavgcesparse, mlpavgerror, mlpavgerrorsparse, mlpavgrelerror, mlpavgrelerrorsparse,
	mlpclserror, mlpcontinuetraining, mlperror, mlperrorsparse, mlperrorsparsesubset, mlperrorsubset,
	mlpgradbatch, mlpgradbatchsparse, mlpgradbatchsparsesubset, mlpgradbatchsubset,
	mlpkfoldcv, mlprelclserror, mlprelclserrorsparse, mlprmserror, mlprmserrorsparse, mlptrainensemblees, mlptrainnetwork,
	rankdata, rankdatacentered,
	rbfgridcalc2v, rbfgridcalc2vsubset, rbfgridcalc3v, rbfgridcalc3vsubset,
E:	covm2, covm, pearsoncorrm2, pearsoncorrm, spearmancorrm2, spearmancorrm,
spline2dbuildercreate, spline2dbuildersetalgoblocklls, spline2dbuildersetalgofastddm, spline2dfit,
F:	barycentricfitfloaterhormann, barycentricfitfloaterhormannwc,
	clusterizergetdistances, clusterizerrunahc, clusterizerrunkmeans,
	cmatrixgemm, cmatrixherk, cmatrixinverse, cmatrixlefttrsm, cmatrixlq, cmatrixlqunpackq,
	cmatrixlu, cmatrixluinverse, cmatrixlusolvem, cmatrixlusolvemfast, cmatrixqr, cmatrixqrunpackq,
	cmatrixrighttrsm, cmatrixsolve, cmatrixsolvefast, cmatrixsolvem, cmatrixsolvemfast, cmatrixtrinverse,
	eigsubspacesolvedenses,
	fisherlda, fisherldan,
	hpdmatrixcholesky, hpdmatrixcholeskyinverse, hpdmatrixinverse, hpdmatrixsolve, hpdmatrixsolvefast, hpdmatrixsolvem, hpdmatrixsolvemfast,
	lsfitlinearc, lsfitlinear, lsfitlinearwc, lsfitlinearw,
	pcabuildbasis, pcatruncatedsubspace, pcatruncatedsubspacesparse,
	polynomialfit, polynomialfitwc,
	rmatrixgemm, rmatrixinverse, rmatrixlefttrsm, rmatrixlq, rmatrixlqunpackq,
	rmatrixlu, rmatrixluinverse, rmatrixlusolvem, rmatrixlusolvemfast, rmatrixqr, rmatrixqrunpackq, rmatrixrighttrsm,
	rmatrixsolve, rmatrixsolvefast, rmatrixsolvels, rmatrixsolvem, rmatrixsolvemfast, rmatrixsyrk, rmatrixtrinverse,
	spdmatrixcholesky, spdmatrixcholeskyinverse, spdmatrixinverse, spdmatrixsolve, spdmatrixsolvefast, spdmatrixsolvem, spdmatrixsolvemfast,
	spline1dfitcubic, spline1dfitcubicwc, spline1dfithermite, spline1dfithermitewc

A6. ALGLIB ⇒ ALGLIB++ Revision Sequence
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
A6.1. Revision Notes
────────────────────
For performance reasons, functions may be implemented with slight differences from how they are documented.
In particular, while output parameters are documented and declared and implemented as (Type &Par),
input parameters are documented as (Type Par), but declared and implemented
as (const Type Par) for the scalar types (bool), (ae_int_t), (double) and (complex),
and as (const Type &amp;Par) for all other types.
This is discussed in greater depth by Stroustrup et al. (https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-in) in-parameter passing with constant references.
For user-supplied functions in the iteration routines and their high-level versions, however, the prototypes actually required are made explicit.
For both these routines as well as for the serializer/unserializer routines, the documented and declared/implemented versions match.

Other exceptions include array parameters, which are documented as (Type &), but declared as (const Type &), as indicated below:
	rankdatacentered(∙,_,_);
	rankdata(∙,_,_);
	xdebugb1not(∙);
	xdebugb2not(∙);
	xdebugc1neg(∙);
	xdebugc2neg(∙);
	xdebugi1neg(∙);
	xdebugi2neg(∙);
	xdebugr1neg(∙);
	xdebugr2neg(∙);
	rvectorcopy(_,_,_,∙,_);
	rmatrixcopy(_,_,_,_,_,∙,_,_);
	rmatrixgencopy(_,_,_,_,_,_,_,∙,_,_);
	rmatrixgemv(_,_,_,_,_,_,_,_,_,_,∙,_);
	sparsegemv(_,_,_,_,_,_,∙,_);
	rmatrixmv(_,_,_,_,_,_,_,_,∙,_);
	rmatrixsymv(_,_,_,_,_,_,_,_,_,∙,_);
	rmatrixsyvmv(_,_,_,_,_,_,_,∙);
	sparsetrmv(_,_,_,_,∙,_);
	rmatrixger(_,_,∙,_,_,_,_,_,_,_);
	rmatrixtranspose(_,_,_,_,_,∙,_,_);
	rmatrixtrsv(_,_,_,_,_,_,_,∙,_);
	sparsetrsv(_,_,_,_,∙);
	rmatrixenforcesymmetricity(∙,_,_);
	rmatrixgemm(_,_,_,_,_,_,_,_,_,_,_,_,_,∙,_,_);
	cmatrixgemm(_,_,_,_,_,_,_,_,_,_,_,_,_,∙,_,_);
	rmatrixsyrk(_,_,_,_,_,_,_,_,∙,_,_,_);
	cmatrixsyrk(_,_,_,_,_,_,_,_,∙,_,_,_);
	cmatrixherk(_,_,_,_,_,_,_,_,∙,_,_,_);
	rmatrixlefttrsm(_,_,_,_,_,_,_,_,∙,_,_);
	cmatrixlefttrsm(_,_,_,_,_,_,_,_,∙,_,_);
	rmatrixlusolvefast(_,_,_,∙,_);
	cmatrixlusolvefast(_,_,_,∙,_);
	spdmatrixcholeskysolvefast(_,_,_,∙,_);
	hpdmatrixcholeskysolvefast(_,_,_,∙,_);
	rmatrixlusolvemfast(_,_,_,∙,_,_);
	cmatrixlusolvemfast(_,_,_,∙,_,_);
	spdmatrixcholeskysolvemfast(_,_,_,∙,_,_);
	hpdmatrixcholeskysolvemfast(_,_,_,∙,_,_);
	rmatrixrighttrsm(_,_,_,_,_,_,_,_,∙,_,_);
	cmatrixrighttrsm(_,_,_,_,_,_,_,_,∙,_,_);
	rmatrixsolvefast(_,_,∙,_);
	cmatrixsolvefast(_,_,∙,_);
	spdmatrixsolvefast(_,_,_,∙,_);
	hpdmatrixsolvefast(_,_,_,∙,_);
	rmatrixsolvemfast(_,_,∙,_,_);
	cmatrixsolvemfast(_,_,∙,_,_);
	spdmatrixsolvemfast(_,_,_,∙,_,_);
	hpdmatrixsolvemfast(_,_,_,∙,_,_);
	spdmatrixcholeskyupdateadd1buf(∙,_,_,_,_);
	spdmatrixcholeskyupdateadd1(∙,_,_,_);
	spdmatrixcholeskyupdatefixbuf(∙,_,_,_,_);
	spdmatrixcholeskyupdatefix(∙,_,_,_);

A6.2. Test Stages
─────────────────
39	Integration of version 3.18.0 ― being done separately from the main branch.
39	Removed the CPU initialization for FP-rounding (more recent versions of GCC now seem to handle this right).
0-39	Removed hook-stub routines:
	―	trypexec from DataAnalysis, Interpolation, LinAlg, Statistics,
	―	notes are kept on the parallelism hooks.
39	Topologically sorted all the functions: both static and external, except *alloc(), [un]serialize(), *_{init,copy,free}().
0-39	Ap.{cpp,h}: Normalized translator-generated names across namespaces:
		ae_machineepsilon → machineepsilon, ae_pi → pi, ae_maxrealnumber → maxrealnumber, ae_minrealnumber → minrealnumber,
		ae_c_abs → abscomplex, ae_complex → complex, ae_c_conj → conj, ae_c_sqr → csqr, ae_sign → sign, ae_sqr → sqr,
		ae_iceil → iceil, ae_ifloor → ifloor, ae_round → iround, ae_trunc → itrunc,
		ae_maxreal → maxreal, ae_minreal → minreal, ae_maxint → maxint, ae_minint → minint,
		ae_get_cores_to_use → getnworkers, ae_set_cores_to_use → setnworkers, ae_set_error_flag → set_error_flag,
		ae_randommid → randommid, ae_randomreal → randomreal, ae_randombool → randombool, ae_randominteger → randominteger,
		ae_tickcount → tickcount,
		ae_complex_from_i → complex_from_i, ae_complex_from_d → complex_from_d
0-39	Removed pi() from Ap.{cpp,h} (since it's already defined in Ap.h as a constant, ‟pi”).
0-39	Synthesized the local ‟gateway” alglib_impl::complex → alglib::complex function complex_from_c() in Ap.cpp.
	Generalized existing routines: complex_from_{d,i}(⋯) from (X) to (X, Y = 0.0).
	Synthesized complex::complex(⋯) and complex_from_{d,i,c}(⋯) for Y ≠ 0.0.
0-39	Move diagnostic functions to TestC.cpp and remove their declarations:
	―	seterrordiff() from AlgLibInternal.{cpp,h}
	―	set_error_flag(), ae_get_last_error_file(), ae_get_last_error_line(), ae_get_last_error_xdesc() from Ap.{cpp,h}

	−	sef_file, sef_line, sef_xdesc from Ap.cpp
	―	Eliminate the ae_get_last_error_*() functions and replace them by the corresponding sef_* variables.
0-39	Remove all comments on, references to and support for tracing/logging added in 3.16:
	―	Ap.{cpp,h}:
			ae_trace_file(), ae_trace_disable(), ae_is_trace_enabled(), ae_trace()
	―	AlgLibInternal.{cpp,h}:
			tracevectorautoprec(), tracevectorunscaledunshiftedautoprec(), tracerownrm1autoprec(),
			tracevectore6(), tracevectore615(), tracerownrm1e6()
	―	Optimization.{cpp,h}:
		3.15: The *trace* routines were stubs and were removed.
		3.16: The *trace* routines, dotrace*, doprobing were activated for the IPM, SLP and SQP solvers.
		3.17: The tracegamma vector and extendeddebug and dotimers flags & members and rep*time members are also removed.
	―	Optimization.cpp, Manual.htm:
			TRACING * SOLVER comments
0-39	Optimized ifloor(A,B) as A / B and iceil(A,B) as (A + B - 1) / B, for integer types A and B.
	Replaced i{floor,ceil,trunc,round}() by std::{floor,ceil,trunc,round}(), for floating point types.
0-39	Synthesized increment operators:
	―	*X = *X + 1 ⇒ ++*X, else X = X + 1 ⇒ X++ for non-pointers.
	―	*X = *X - 1 ⇒ --*X, else X = X - 1 ⇒ X-- for non-pointers.
	―	X = X + 1.0 ⇒ X++;
0-39	Synthesized update operators:
	―	X = X % Y ⇒ X %= Y (*)
	―	X = X & Y ⇒ X &= Y
	―	X = X + Y ⇒ X += Y
	―	X = Y + X ⇒ X += Y
	―	X = Y + (X) ⇒ X += Y
	―	X = X - Y ⇒ X -= Y, where Y is a monomial.
	―	X = X - Y ± Y' ± ⋯ ± Y" ⇒ X -= Y ∓ Y' ∓ ⋯ ∓ Y", where Y, Y', ⋯, Y" are monomials. (‡)
	―	X = X * Y ⇒ X *= Y, X = -X * Y ⇒ X *= -Y, X = Z * X ⇒ X *= Z, X = Z * X * Y ⇒ X *= Z * Y, where Y and Z are monomials.
	―	X = X / Y ⇒ X /= Y, where Y is a single factor.
	―	X = X * Y / Z ⇒ X *= Y / Z, in some cases, where X, Y and Z are floating point.
	(*) This was previous already done in its sole occurrence: in hqrnduniformi() in AlgLibMisc.cpp.
	(‡) X = X - Y + Y' - Y" is specially optimized, since its occurrences all involved *max(⋯,⋯) on the right-hand side.
0-39	Partial recoding of Ap.{cpp,h} to bring it in line with ALGLIB++:
	―	The declarations of ae_vector_wrapper::ae_vector_wrapper() and ae_vector_wrapper::operator=() in Ap.h were removed - unused.
	―	The declarations of ae_matrix_wrapper::ae_matrix_wrapper() and ae_matrix_wrapper::operator=() in Ap.h were removed - unused.
	―	*_free(⋯, true) changed to *_free(⋯, false) in:
		ae_vector_wrapper::~ae_{vector,matrix}_wrapper(), ae_vector_wrapper::attach_to(),
		ae_matrix_wrapper::~ae_{vector,matrix}_wrapper(), ae_matrix_wrapper::attach_to().
	―	In the original implementaton of ALGLIB *_clear() (= *_free(, true)) should have been *_destroy (= *_free(, false))
		in each of these routines.
		Both are equivalent in the GPL version of ALGLIB, because *_clear() and *_destroy() were the same for ae_{vector,matrix},
		but this is only an incidental equivalence that should not be relied on.
	―	Synthesized the function alglib::set_error_msg() in Ap.cpp and redefined ThrowErrorMsg() in Ap.h, using it.
	―	Remade the enum { OWN_CALLER = false, OWN_AE = true } type as bool and removed the enumerated constants.
	―	In-line some of the alglib:: object member functions in Ap.h, removing them from Ap.cpp.
		―	alglib::ae_vector_wrapper::c_ptr(), ae_matrix_wrapper::c_ptr()
		―	c_ptr() for object classes, moved from DefClass to DecClass.
		―	alglib::complex constructors.
	―	Added declarations of the global routines in Ap.cpp
			_ialglib_pack_n2(), _ialglib_mm22(), _ialglib_mm22x2()
		into Ap.h, alongside those of the other _ialglib_*() routines.
0-39	Fully nativizing floating point constants and operations, replacing them by their standard forms:
	―	ae_sin,ae_cos,ae_tan,ae_sinh,ae_cosh,ae_tanh,ae_asin,ae_acos,ae_atan,ae_atan2,ae_log,ae_pow,ae_exp ⇒ sin,cos,tan,sinh,cosh,tanh,asin,acos,atan,atan2,log,pow,exp
	―	ae_fabs,ae_sqrt ⇒ fabs,sqrt
	―	ae_isfinite,ae_isfinite_stateless ⇒ isfinite,isfinite
	―	ae_isnan,ae_isnan_stateless,fp_isnan ⇒ isnan
	−	ae_isinf,ae_isinf_stateless,fp_isinf ⇒ isinf
	―	ae_isneginf,ae_isposinf ⇒ isneginf,isposinf
	―	Remove the definitions from Ap.cpp and declarations from Ap.h of those that have been nativized.
	―	_*state->v_nan,fp_nan ⇒ NAN
	―	_*state->v_posinf,fp_posinf ⇒ +INFINITY
	―	_*state->v_neginf,fp_neginf ⇒ -INFINITY
	―	_*state->v_{nan,posinf,neginf} are retained (for now) as in-line constant members.
0-39	Removing translator-generated artifacts.
	Commenting out or eliminating translator-generated dead-code or vestigial code from the commercial version of ALGLIB.
	―	Merge {b,i,r}{vector,matrix}setlengthatleast() into {vector,matrix}setlengthatleast().
	―	Normalize boolean comparisons: A&&B || !A&&!B ⇒ A == B, A&&B || !A&&C ⇒ A? B: C
		(including some places where A and !A are opposite comparisons on floating point).
	―	Removed aresameboolean(); already subsumed by "==";
	―	Removed countdown(): it is unused.
	―	Removed ivectorappend(): it is unused.
	―	Removed {min,max}int(): they are duplicates respectively of i{min,max}2().
	―	Renamed ae_minreal() as rmin2() and ae_maxreal() as rmax2().
	―	Moved i{min,max}2(), imin3(), {i,r}max3(), rmaxabs3(), {i,r}boundval() from AlgLibInternal.{cpp,h} to Ap.{cpp,h}.
	―	Removed maxreal3(); it's a duplicate of rmax3().
	―	Removed boundval(): it's a duplicate of rboundval().
	―	Removed unsetintegerarray(), unsetrealarray(): they are duplicates of SetVector().
	―	Removed unsetrealmatrix(): it's a duplicate of SetMatrix().
	―	Removed ae_touch_ptr(), touchint(), touchreal(), alwaysfalse();
		touchint(), touchreal() unused variables are rectified or eliminated;
		code shielded by touchint(), in ftbase_ftapplysubplan() and dsoptimalsplitk(), rectified;
		"inaccessible" code, shielded by alwaysfalse(), rectified.
	―	Removed threadunsafeinc(), threadunsafeincby() and in-line substituted for it.
	―	Removed inc(), dec() and in-line substituted for it.
	―	Removed inttoreal() from AlgLibInternal.{cpp,h} ― it's unused and duplicates the typecast function double().
	―	Removed countnz{1,2}() from AlgLibInternal.{cpp,h} ― they are unused.
	―	Removed idivup() from AlgLibInternal.{cpp,h}; replacing idivup(a,b) by the operation (a + b - 1) / b.
	―	Removed rmul{2,3}() from AlgLibInternal.{cpp,h}; replacing rmul2(a,b) by (double)a * b, rmul3(a,b,c) by (double)a * b * c.
	―	The output parameters in ae_serializer_unserialize_{bool,int,int64,double} were remade into return values.
	―	The parameter type in ae_shared_pool_is_initialized() was raised from (void *) to (ae_shared_pool *).
	―	Removed the unused or redundant types s{boolean,integer,real,complex}[array] from AlgLibInternal.{cpp,h};
	―	Converted sinteger ⇒ ae_int_t, sreal ⇒ double, srealarray ⇒ RVector;
	―	Redefined and replaced srealarray_{init,copy,free} by RVector_{init,copy,free}.
0-39	Recode random*():
	―	Synthesize new routines: randombool(), randommid().
	―	Remove the state variable from alglib_impl::randominteger() and alglib_impl::randomreal().
∙	Recode *pythag2():
	―	Removed pythag2() from AlgLibInternal.{cpp,h} - it is a duplicate of safepythag2();
		replaced pythag2() in LinAlg.cpp by safepythag2().
∙	Recode "eternal" locks in Ap.{cpp,h}.
	―	Renamed ae_lock::eternal ae_lock::is_static.
	―	eternal_malloc() embedded in ae_init_lock_eternal() and eliminated.
	―	ae_init_lock_eternal(ae_lock *lock) combined into ae_init_lock(ae_lock *lock, bool make_automatic) as:
		―	ae_init_lock(ae_lock *lock, bool is_static, bool make_automatic);
		with
		―	is_static = true, make_automatic = false for ae_init_lock_eternal(),
		―	is_static = false for ae_init_lock().
0-39	Reorder Ap.{cpp,h} & reconcile with the local version of AlgLib.
	―	alglib::ByteOrder made local in Ap.cpp and commented out (it's not used).
	OS-dependent low-level lock routines in Ap.cpp are consolidated and made in-line.
	―	Renamed _ae_{init,acquire,release,free}_lock_raw as _ae_{init,acquire,release,free}_lock.
39	Reduced the xparams types and values.
	―	Combined the threading model names AE_{SERIAL_UNSAFE,SERIAL,PARALLEL}.
		and flags _ALGLIB_FLG_THREADING_{USE_GLOBAL,SERIAL,PARALLEL} into {Non,Ser,Par}TH.
	―	Replaced the threading flag names "xdefault, "serial" and "parallel" respectively by NonTH, SerTH and ParTH.
	―	Changed xparams into enum { NonTH = 0, SerTH = 1, ParTH = 2 }.
0-39	Consolidated {get,set}nworkers(), _ae_cores_count(), _ae_{get,set}_global_threading(), setglobalthreading().
0-39	Ap.{cpp,h}:
∙	Part of the ae_state structure has been removed:
	―	Remove flags from ae_state and make it "AutoS" as CurFlags.
		Remove the ae_state parameter from ae_set_state_flags().
	―	Ap.*: thread_exception_handler, parent_task and worker_thread are unused.
		Remake them "AutoS" as ErrorOp(), SupTask, CurThread, respectively.
	―	These are all remnants from the Commercial Version of ALGLIB and not actually needed or used anywhere.
	―	Remove v_nan, v_posinf, v_neginf from ae_state and replace then, respectively, by NAN, +INFINITY and -INFINITY.
	―	Remove endianness from ae_state: already localized as ByteOrder in Ap.cpp.
	―	Remove last_block from ae_state: replace it with a single shared object BotFr inside ae_state_init().
		The frame base, last_block, is block-level static and compile-time fixed and does not need to be made thread-safe.
	To regain thread-safety will require making CurFlags thread-local
	(but multi-threadedness was not officially part of the Free Edition of ALGLIB).
∙	Remove the extra xparams: they are only relevant for the Commercial Version.
	―	xparam parameters from declarations in: *.h, in comments in *.cpp and in Manual.htm.
	―	xparam arguments from function calls in *.cpp.
	―	Remove the conditional if (_xparams != NonTH) ae_set_state_flags(_xparams),
		and put it in the caller BEFORE the routine, wherever it is set to a value ≠ NonTH,
		with a call to ae_set_state_flags(NonTH) to follow.
	―	Update TestZ to reflect the change to xparams.
0-39	AE_{{,PARALLEL_}SINGLECORE,{SEQUENTIAL_,PARALLEL_}MULTICORE} remade into an enum; AE_NOENV = 0 added.
	AE_TEST renamed into a constant TestMode as declared as the enum type.
	Multi-branch #if conditionals for the enum made into switch statements.
39	TestC.cpp: setting the values of global_failure_flag and return the values of main() to EXIT_{SUCCESS,FAILURE}.
9-39	The state structure removed, except the frame pointers --
	―	Remove break_jump, last_error, error_msg from ae_state
		in favor of Ap.cpp-internal globals CurBreakAt, CurStatus, CurMsg, respectively.
	―	Remove the ae_state parameter from ae_state_set_break_jump() and the TryX() macro, remaking TryX as a name-macro.
	―	Redefine ap_error() as the equivalent of ap_error(CurMsg).
	―	CurMsg made file-scope local with suitable redefinitions of set_error_flag() and ap_error().
	―	Remove the ae_state parameter from set_error_msg() and the ThrowErrorMsg() and TryCatch() macros.
	―	To regain thread-safety will require making TopFr, CurBreakAt, CurStatus, CurMsg thread-local;
		(but multi-threadedness was not officially part of the Free Edition of ALGLIB).
	―	As an alternative/intermediate solution, the globals might later be restored as frame-local,
		pushed on the frame to make way for new copies in ae_state_init() and popped off with ae_state_clear().
0-39	Empty and remove the global ae_state structure.
	―	Recode the core routines for the types:
		ae_dyn_block, ae_vector, ae_matrix, ae_smart_ptr, x_vector, x_matrix, ae_lock, _lock, ae_shared_pool
		in Ap.cpp to accommodate this change, grafting the revisions already made to them in ALGLIB++.
	―	Remove all ae_state parameters from function declarations, there and elsewhere.
	―	Remove all ae_state parameters from function calls, there and elsewhere.
	―	Split ae_clean_up_before_breaking() into ae_clean_up() and ae_state_clear().
	―	Remove ae_check_zeros(); placing, instead, the responsibility for zero-initialization into the constructor wrappers.
	―	Reduce multi-threaded support in TestX, for now, until the former ae_state variables are made thread-local,
		and synthesize approximate comparisons NearR(), SmallR() in TestX.cpp,
		grafting these changes and most of TestX from ALGLIB++.
0-39	Recoded the core-counting routines.
	―	Synthesis of alglib_impl::ae_count_cores().
	―	Renamed alglib::_ae_cores_count() as ae_cores_count().
0-39	Restructured the "object" interface.
	―	Internal object are made direct and calls to [ae_]malloc() and [ae_]free() removed.
	―	Most of the "internal" object class has been removed and transposed into the main object class.
0-39	Normalize conditional expressions in branches, loops, boolean arguments and boolean assignments.
	Normalized comparisons
	―	(A-B)/C ≥ D to A-B ≥ C×D,
	―	|A-B|/C ≥ D to |A-B| ≥ C×D,
	for C ≥ 0; in most places, removing a hidden bug in the PCA test in TestC.cpp, and possibly other hidden bugs, as a result.
0-39	Removed stdafx.h.
	Future expansion of ALGLIB++ to Windows support will take place either in LLVM or in VC with "precompiled headers" turned off.
0-39	Ap.{cpp,h}: Reconciled with AlgLib++
	―	Removed valgrind from ae_dyn_block (it was a recent addition to ALGLIB, and is redundant, unused except as a debugging hook.)
	―	Commented out multi-threading stubs; reserving for later reuse or appropriation with a new multi-threading framework.
40	Kernel{Avx2,Fma,Sse2}.{cpp,h}, Ap.{cpp,h}: Recoding the kernel dispatcher.
	Kernels{Avx2,Sse2}.{cpp,h}: Regularized the parameters.
	―	rcopyv():	rcopyv_avx2(ae_int_t n, ⋯) ⇒ rcopyv_avx2(const ae_int_t n, ⋯)
	―	rsetvx():	rsetvx_avx2(⋯, double *__restrict x) ⇒ rsetvx_avx2(⋯, Real *__restrict x)
	―	rmergemaxv():	rmergemaxv_avx2(ae_int_t n, ⋯) ⇒ rmergemaxv_avx2(const ae_int_t n, ⋯)
	―	rmergeminv():	rmergeminv_avx2(ae_int_t n, ⋯) ⇒ rmergeminv_avx2(const ae_int_t n, ⋯)
	―	rmergemulv():	rmergemulv_avx2(ae_int_t n, ⋯) ⇒ rmergemulv_avx2(const ae_int_t n, ⋯)
	―	rdotv():	rdotv_sse2(ae_int_t n, const Real *x) ⇒ rdotv_sse2(const ae_int_t n, const Real *_restrict y)
	―	rdotv2():	rdotv2_sse2(ae_int_t n, const Real *x, const Real *y) ⇒ rdotv2_sse2(const ae_int_t n, const Real *_restrict y, const Real *_restrict y)
	Ap.{cpp,h}, Kernels{Avx2,Fma,Sse2}.{cpp,h}: Recoded the kernel dispatcher:
	―	Rewrote the kernel routines: *_avx2() ⇒ avx2_*(), *_fma() ⇒ fma_*(), *_sse2() ⇒ sse2_*().
	―	Rewrote/renamed the internal macros: _ALGLIB_KKK_{VOID,RETURN}_{AVX2,FMA,SSE2}() ⇒ _Ker{Sub,Fun}{Avx2,Fma,Sse2}()
	―	Rewrote/renamed the external macros: _ALGLIB_KERNEL_{VOID,RETURN}{_AVX2,_FMA,_SSE2}*() ⇒ Ker{Sub,Fun}{Avx2,Fma,Sse2}*()
	―	Rename local routines with *_{avx2,fma,sse2}_*(), as {avx2_fma,sse2}_*_*().
	Ap.{cpp,h}: Recoded and resorted the new BLAS.
0-39	Synthesize Near*(), Small*() comparison macros.
	―	TestI.cpp: Synthesize Near[At]{R,C}() in the alglib namespace (as already done with Test{X,Z}.cpp).
	―	AlgLibInternal.{cpp,h}: Add in-line approximate comparison routines.
			{Near,Small}[At]{R,CR,C}().
		in the alglib_impl namespace.
	―	AlgLibInternal.{cpp,h}: Replace approxequal() with NearAtR().
	―	Synthesize these new routines in most places (some places, like fabs(A-B) < fabs(C-D), are not all converted).
	―	TestC.cpp: Normalized conditionals (continued):
		―	|A-B|/C ≥ D to |A-B| ≥ C×D,
		Exposes bugs, inherited from ALGLIB, in the dforest test routines; and an underlying bug in the df routines.
		It is the same hidden bug already uncovered and corrected in ALGLIB++.
0-39	Removed a hidden bug in dforest, inherited from ALGLIB
	... dealing with the way avgce is calculated and with the mismatch with how it was used and tested.
	Rewrote parts of:
	-	testdforestunit_basictestallsame() and testdforestunit_basictestrandom() in TestC.cpp.
	-	dforest_processvotingresults() in DataAnalysis.cpp
	to make them consistent with dfavgce() in DataAnalysis.cpp.
40	{Ap,AlgLibInternal,LinAlg,Kernel*}.*: Root canal.
	Also: integrating some of the recoding from the local, non-public-facing, version of AlgLib++.
	Cleaning up the mess inherited from the changes made to the infrastructure of ALGLIB between from version 3.17 and version 3.18.
	―	Kernels{Avx2,Fma,Sse2}.{cpp,h}: Removed the redundant _ALGLI_HAS_*_INTRINSIC guards for #include "Kernel*.h" in Ap.h.
	―	KernelsFma.h: The wrong guard (_ALGLIB_HAS_AVX2_INTRINSICS) is used in KernelsFma.h.
		Replaced it with _ALGLIB_HAS_FMA_INTRINSICS.
	―	Broadened the range of Kernel*.h:
		―	Moved the #include "Kernels*.h" from Ap.cpp to Ap.h, under _ALGLIB_IMPL_DEFINES guard.
		―	Moved the #defines {_ALGLIB_IMPL_DEFINES,_ALGLIB_INTEGRITY_CHECKS_ONCE} from Ap.cpp to {LinAlg,AlgLibInternal}.cpp.
	―	Ap.{cpp,h}, LinAlg.cpp: Collated {Ap.cpp,LinAlg.cpp} kernel-dependent spchol functions:
		―	Combined the Ap versus LinAlg functions.
		―	Moved the Ap functions into LinAlg, made them local and removed their declarations.
	―	Ap.{cpp,h}, AlgLibInternal.cpp: Collated {Ap.cpp,AlgLibInternal.cpp} kernel-dependent ablasf functions:
		―	Combined the Ap versus AlgLibInternal functions.
		―	Moved the Ap functions into AlgLibInternal, made them local and removed their declarations.
40	AlgLibInternal.{cpp,h}: added rmatrixgemmf() alongside cmatrixgemmf().
0-39	Corrections in the comments & printouts; e.g.
	―	"launcn" → "launch", "traling" → "trailing", "trainig" → "training", "i.e \." → "i.e.", "i.e" → "i.e.",
	―	"inself" → "itself", "it's" → "its", "discripancy" → "discrepancy", "strucure" → "structure",
	―	"⋯intial⋯" → "⋯initial⋯", "lentgh" → "length", "loosing" → "losing", "Additonally" → "Additionally",
	―	"VIMP⋯" → "VIPM⋯", "fileds" → "fields", "ouput" → "output", "paremeter" → "parameter".
0-39	TestC.cpp: Adding changes made in AlgLib++.
	―	Removed the "silent" from TestC routines
	―	modify if (!silent)	⇒	if (!silent || [errors])
	―	Added RelNear()
	―	Replaced seterrorflagdiff(P, A, B, Tiny, Scale) by set_error_flag(P, !RelNear(A, B, Tiny, Scale));
	―	Removed the error-tracking facilities: the sef* and setflag* routines.
		Converted set_error_flag(&X, Y) ⇒ X = X || Y;
		Converted set_error_flag(P, Y) ⇒ *P = *P || Y;
	―	Removed ALGLIB_ABORT_ON_ERROR_FLAG, effectively freezing it out to false (it's not used anywhere else).
0-39	AlgLibInternal.{cpp,h}: Adding changes made in AlgLib++.
	AlgLibInternal.{cpp,h}: Recoding of internal and non-API routines.
	Integrating changes to AlgLibInternal.{cpp,h} already made in AlgLib++.
	―	Relabelling in some calls of ae_assert().
	―	Re-commenting in many places.
	―	swapb(), swapc() added.
		swap{b,i,r,c}() synthesized in numerous places.
	―	Non-API routine tiledsplit(tasksize, tilesize, &task0, &task1)
		redefined as task0 = tiledsplit(tasksize, tilesize), task1 = tasksize - task0;
	―	Non-API routine splitlength(tasksize, chunksize, &task0, &task1)
		redefined as task0 = splitlength(tasksize, chunksize), task1 = tasksize - task0;
	―	Non-API routine splitlengtheven(tasksize, &task0, &task1)
		redefined as task0 = splitlengtheven(tasksize), task1 = tasksize - task0;
	―	Non-API routine sortmiddlei() removed and replaced by its duplicate tagsortmiddlei() [newly added to version 3.17.0].
	―	Non-API routines tagsortmiddleir(), tagsortmiddlei() redeclared with default offset = 0, and recoded.
		Declarations changed from tagsortmiddlei*(a, b, offset, n) to tagsortmiddlei*(a, b, n, offset = 0).
	―	Non-API routines tagsortfast[ir]() recoded.
	―	Local routines tsort_tagsortfast[ir]rec() recoded.
	―	Local routine tsort_tagsortfastirec(a, b, bufa, bufb, i1, i2)
		redefined as tsort_tagsortfastirec(a->xR + i1, b->xZ + i1, bufa->xR + i1, bufb->xZ + i1, i2 - i1 + 1)
	―	Local routine tsort_tagsortfastrrec(a, b, bufa, bufb, i1, i2)
		redefined as tsort_tagsortfastrrec(a->xR + i1, b->xR + i1, bufa->xR + i1, bufb->xR + i1, i2 - i1 + 1)
	―	Local routine tsort_tagsortfastrec(a, bufa, i1, i2)
		redefined as tsort_tagsortfastrec(a->xR + i1, bufa->xR + i1, i2 - i1 + 1)
	―	Localized static constants linmin_{armijofactor,ftol,xtol,maxfev,defstpmax} to the routines they are used in,
		and removed the "linmin_" prefix.
	―	All of the routines in the FTBASE package were recoded.
	―	Non-API routine ftapplyplan(&plan, &buf, offset, reps) redeclared with default offset = 0 and reps = 1, and recoded.
	―	Local routines ftbase_ftpushentry{2,4}() combined with ftbase_ftpushentry() by making defaults eparam1 = -1, eparam2 = 0, eparam3 = 0.
	―	Local routine(s) ftbase_ftpushentry*(plan, ⋯) redefined as ftbase_ftpushentry*(&plan->entries, ⋯).
	―	Local routine ftbase_fftirltrec(a, astart, astride, b, bstart, bstride, m, n)
		redefined as ftbase_fftirltrec(a->xR + astart, astride, b->xR + bstart, bstride, m, n).
	―	Local routine ftbase_ffticltrec(a, astart, astride, b, bstart, bstride, m, n)
		redefined as ftbase_ffticltrec(a->xR + astart, astride, b->xR + bstart, bstride, m, n).
	―	Local routine ftbase_internalcomplexlintranspose(a, n, m, astart, buf)
		redefined as ftbase_internalcomplexlintranspose(a->xR + astart, n, m, buf).
	―	Local routine ftbase_ftapplycomplexcodelettwfft(a, offs, args, n, mun)
		redefined as ftbase_ftapplycomplexcodelettwfft(a->xR + offs, args, n, mun).
	―	Local routine ftbase_ffttwcalc(a, aoffset, n1, n2)
		redefined as ftbase_ffttwcalc(a->xR + aoffset, n1, n2).
	―	Local routine ftbase_ftapplycomplexreffft(a, offs, args, n, mun, buf)
		redefined as ftbase_ftapplycomplexreffft(a->xR + offs, args, n, buf).
		The mun == 2 assertion is placed outside and before the call.
	―	Local routine ftbase_ftapplycomplexcodeletfft(a, offs, args, n, mun)
		redefined as ftbase_ftapplycomplexcodeletfft(a->xR + offs, args, n).
		The mun == 2 assertion is placed outside and before the call.
	―	Local routine ftbase_ftbluesteinsfft(plan, a, abase, aoffset, ⋯, bufa, bufb, bufc, bufd)
		redefined as ftbase_ftbluesteinsfft(plan, a->xR + abase + aoffset, ⋯, bufa, bufc).
	―	Local routine ftbase_ftradersfft(plan, a, abase, aoffset, ⋯, buf)
		redefined as ftbase_ftradersfft(plan, a->xR + abase + aoffset, aoffset, ⋯, buf).
	―	Local routine ftbase_ftapplysubplan(plan, subplan, a, abase, aoffset, buf, repcnt)
		redefined as ftbase_ftapplysubplan(plan, subplan, a->xR + abase + aoffset, aoffset, buf, repcnt).
	―	Local routine ftbase_ftprecomputebluesteinsfft(n, m, precr, offs)
		redefined as ftbase_ftprecomputebluesteinsfft(n, m, precr->xR + offs).
	―	Local routine ftbase_ftprecomputeradersfft(n, rq, riq, precr, offs)
		redefined as ftbase_ftprecomputeradersfft(n, rq, riq, precr->xR + offs).
0-39	LinAlg.{cpp,h}: Adding some changes made in AlgLib++.
	LinAlg.cpp: Recoded {r,c}matrixgemm[rec] to increase efficiency
	Reformatted the layout to combine the type/object section with function section in each namespace.

A6.3. Test Results
──────────────────
39	7519 1.0x 12049 1.0x 11909 1.0x 9587 1.0x 1635369021 (6179c03d) 83
39	7874 1.0x 12196 1.0x 11909 1.0x 9266 1.0x 1635374188 (6179d46c) 87
39	7937 1.0x 12196 1.0x 12199 1.0x 9138 1.0x 1635377026 (6179df82) 86
39	7874 1.0x 12196 1.0x 12199 1.0x 8792 1.1x 1635383008 (6179f6e0) 84
39	7752 1.0x 12049 1.0x 11769 1.0x 9037 1.0x 1635461545 (617b29a9) 85
39	7874 0.9x 10310 1.1x 12199 1.0x 9635 1.0x 1635576384 (617cea40) 86
39	6712 1.2x 12347 1.0x 12052 0.9x 9104 1.0x 1637111328 (61945620) 91
39	7813 0.9x 11629 0.9x  9527 1.0x 9296 1.0x 1637355701 (619810b5) 88
39	7813 1.0x 12196 1.0x 12199 1.0x 9023 1.1x 1637444986 (61996d7a) 87
39	6452 1.2x 12501 1.0x 12052 1.0x 9641 1.0x 1637823278 (619f332e) 87
39	6849 1.1x 12501 0.9x 12199 1.0x 9327 1.0x 1638487069 (61a9541d) 88
39	7692 1.0x 12196 1.0x 12199 1.0x 9061 1.0x 1638699590 (61ac9246) 88
39	7874 1.0x 12196 1.0x 12199 1.0x 8774 1.1x 1638841044 (61aebad4) 90
39	7874 1.0x 12347 0.9x 11769 1.0x 9523 1.0x 1638850198 (61aede96) 89
39	7874 1.0x 12049 1.0x 12199 1.0x 9227 1.0x 1638953198 (61b070ee) 87
39	7752 1.0x 12049 1.0x 12052 1.0x 9327 1.0x 1638958917 (61b08745) 84
39	7634 1.0x 11906 1.0x 11115 1.1x 8792 1.0x 1639431222 (61b7bc36) 83
39	7874 1.0x 11766 1.0x 12199 1.0x 9476 1.0x 1639513145 (61b8fc39) 84 // TRFAC failed in TestC.
39	7874 1.0x 12049 1.0x 10104 1.1x 9367 1.0x 1639516272 (61b90870) 82 // Corrected.
39	7463 0.8x 11629 1.0x 11769 1.0x 8752 1.0x 1641874215 (61dd0327) 87 // Re-sorted the routines.
39	7937 1.0x 12196 1.0x 12052 1.0x 9544 1.0x 1642926906 (61ed133a) 85 // Real to Complex conversion generalized.
39	6410 0.9x 10310 1.1x 10313 1.0x 9539 1.0x 1642933377 (61ed2c81) 83 // Removed all trace-related functionality.
39	7353 1.0x 11365 1.0x 11368 1.0x 9241 1.0x 1643002115 (61ee3903) 82 // Synthesize the ++ and -- operators.
39	7937 1.0x 12347 0.9x 12199 1.0x 9513 1.0x 1643154969 (61f08e19) 84 // Synthesize the {+,-,*,/,%,&}= operators.
39	8000 1.0x 12501 1.0x 12199 1.0x 9100 1.0x 1643326894 (61f32dae) 80 // Synthesize in-line operators & set_error_msg(), etc.
39	6803 1.1x 11629 1.0x 11909 1.0x 9143 1.0x 1643389187 (61f42103) 81 // Nativize floating point constants and operations.
39	7752 1.0x 12501 1.0x 12199 1.0x 9608 1.0x 1643680716 (61f893cc) // Remove translator-artifacts. (Crashed in TestC at testspline2d.)
39	8000 1.0x 12196 1.0x 12199 1.0x 9187 1.0x 1643685611 (61f8a6eb) 80 // Remove translator-artifacts. (Corrected.)
39	7937 1.0x 12501 1.0x 10873 0.9x 9172 1.1x 1643757812 (61f9c0f4) 80 // Recode random*() and *pythag2().
39	7692 1.0x 12347 0.9x 11240 1.0x 9492 1.0x 1643828901 (61fad6a5) 78 // Recode "eternal" locks in Ap.{cpp,h}.
39	7874 1.0x 12501 1.0x 12199 1.0x 9018 1.0x 1644128862 (61ff6a5e) 79 // Recode ByteOrder, _lock routines & xparams.
39	8000 1.0x 12347 1.0x 12052 1.0x 8761 1.0x 1644295249 (6201f451) 81 // Reduce ae_state and xparams.
39	8065 1.0x 12501 1.0x 12199 1.0x 9614 1.0x 1644352844 (6202d54c) 77 // Further reduce ae_state; synthesize TestMode.
39	7937 1.0x 12501 1.0x 11909 1.0x 9296 1.0x 1644431780 (620409a4) 79 // Recoding state and frame routines in Ap.{cpp,h}.
39	7353 1.0x 12501 1.0x 12199 1.0x 9534 1.0x 1644465141 (62048bf5) 79 // Elimination of ae_state, temporary reduction of TestX.
39	7692 1.0x 11629 1.1x 12199 1.0x 9367 1.0x 1644613148 (6206ce1c) 76 // Re-synthesis of RCOMM routines. Failed TestC (iterativesparse, minnlc).
39	8065 0.9x 11629 0.9x 11368 1.1x 9172 1.0x 1644615571 (6206d793) 78 // Error in TestC (iterativesparse) corrected.
39	8130 1.0x 12501 1.0x 12052 1.0x 9307 1.0x 1644616814 (6206dc6e) 75 // Error in TestC (minnlc) corrected.
39	7576 1.1x 12347 1.0x 12350 0.9x 8957 1.0x 1644799817 (6209a749) 77 // Normalization of the RCOMM routines and those similar to it.
39	6289 1.0x 9710 1.0x 8775 1.1x 8569 1.1x 1645146923 (620ef32b) 79 // Restructuring Ap.{cpp,h} & TestZ.cpp; retrofitting ALGLIB++.
39	7937 1.0x 11906 1.0x 11769 1.0x 8699 1.1x 1645147397 (620ef505) 79 // Re-testing, with other processes off.
39	8000 1.0x 12347 1.0x 11368 1.0x 9153 1.0x 1645650939 (6216a3fb) 78 // Normalization of conditionals.
40	7092 1.1x 12347 1.0x 11498 1.0x 9486 1.0x 1646537151 (622429bf) 77 // Recoding the kernel dispatcher.
39	5952 1.0x 9347 1.1x 11115 1.1x 9037 1.0x 1646541002 (622438ca) 77 // Synthesize Small*,Near*. TestC: dforest failed (a hidden bug inherited from ALGLIB was exposed)
39	5952 1.0x 9616 1.0x 11368 1.1x 9471 1.0x 1646544809 (622447a9) 80 // TestC: the hidden bug is temporarily re-hidden.
39	7463 1.0x 11495 1.0x 11115 1.0x 9246 1.0x 1646545184 (62244920) 78 // Checking TestX; suspicious changes in speed.
39	7937 1.0x 12196 1.0x 12199 0.9x 8892 1.1x 1646593750 (622506d6) 79 // Removed the dforest bug and resolved the TestC failure.
40	7937 1.0x 12347 0.9x 12199 1.0x 9673 1.0x 1646868186 (622936da) 79 // Root canal on the kernel dispatcher.
40	7874 1.0x 11237 0.8x 8932 1.1x 9158 1.0x 1647129328 (622d32f0) 80 // Added rmatrixgemmf() alongside cmatrixgemmf().
0-39	7937 1.0x 11906 1.0x 12052 1.0x 9327 1.0x 1647218937 (622e90f9) 77 // Test{I,X,C}: Synchronize to AlgLib++.
0-39	6289 1.0x 10001 1.0x 12199 1.0x 9158 1.0x 1647383434 (6231138a) 78 // Adding more changes made in AlgLib++ to TestC.cpp.
9-39	7874 0.4x 11629 1.1x 12199 1.0x 8801 1.0x 1647593235 (62344713) 79 // AlgLibInternal.{cpp,h}: Synchronize to AlgLib++.
0-39	7092 0.5x 12501 1.0x 12199 1.0x 7795 1.2x 1648502128 (62422570) 78 // Checking for suspicious slowdown in TestX.cpp.
40	4348 1.0x 5000 2.0x 12199 1.0x 8948 1.1x 1648502820 (62422824) 76 // AlgLibInternal.{cpp,h}: New recoding.
40	8065 1.0x 12501 1.0x 12052 1.0x 8819 1.1x 1648856974 (62478f8e) 81 // Stop-gap fix of the slowdown problem in TestX.cpp.

A6.4. The Most Recent Test Run
──────────────────────────────
echo "TestI: API Interface"
TestI: API Interface
./TestI
CPUID: sse2 avx2 fma
OS: POSIX
C++ tests. Please wait...
Allocation counter activated...
Allocation counter checked... Ok
echo "TestY: C++ Wrapper Test"
TestY: C++ Wrapper Test
./TestY
echo "TestZ: Exception-Free Wrapper Test"
TestZ: Exception-Free Wrapper Test
./TestZ
Test exception-free error handling:
Allocation counter activated...
* default flag value          Ok
* 1D arrays                   Ok
* 2D arrays                   Ok
* ALGLIB objects              Ok
* ALGLIB functions            Ok
Allocation counter checked... Ok
echo "TestX: Speed and Consistency"
TestX: Speed and Consistency
./TestX
System:
* cores count                  1
Allocation counter activated...
Basic functions:
* 1D arrays                   Ok
* 2D arrays                   Ok
* CSV support                 Ok
* Serialization (kd-tree)     Ok
* Serialization (RBF)         Ok
* Progress/termination (RBF)  Ok
* Exceptions in constructors  Ok
SMP settings vs GEMM speedup:
* test skipped (no SMP)       ??
Issues:
* Issue 505                   Ok
* Issue 478                   Ok
* Issue 528                   Ok
* Issue 591                   Ok
* Issue 594                   Ok
* Issue 764                   Ok
* Issue 813                   Ok
* Issue 824                   Ok
Performance:
* RGEMM-SEQ-16   (MFLOPS)   8065
* RGEMM-MTN-16              1.0x
* RGEMM-SEQ-32   (MFLOPS)  12501
* RGEMM-MTN-32              1.0x
* RGEMM-SEQ-64   (MFLOPS)  12052
* RGEMM-MTN-64              1.0x
* RGEMM-SEQ-1024 (MFLOPS)   8819
* RGEMM-MTN-1024            1.1x
Allocation counter checked... Ok
echo "TestC: Internal Routines"
TestC: Internal Routines
./TestC
Seed: 1648856974 (62478f8e)
Compiler: GCC
Hardware: 64-bit
Byte Order: little-endian
CPU: Intel
Cores: 1 (serial version)
Libs: (None)
CPUID: sse2 avx2 fma
OS: POSIX
Testing Mode: single core
 1/90: ablasf                           Ok
 2/90: hqrnd                            Ok
 3/90: ablas                            Ok
 4/90: hblas                            Ok
 5/90: creflections                     Ok
 6/90: sblas                            Ok
 7/90: ortfac                           Ok
 8/90: matgen                           Ok
 9/90: tsort                            Ok
10/90: sparse                           Ok
11/90: blas                             Ok
12/90: evd                              Ok
13/90: trfac                            Ok
14/90: polynomialsolver                 Ok
15/90: bdsvd                            Ok
16/90: svd                              Ok
17/90: trlinsolve                       Ok
18/90: safesolve                        Ok
19/90: rcond                            Ok
20/90: xblas                            Ok
21/90: directdensesolvers               Ok
22/90: directsparsesolvers              Ok
23/90: fbls                             Ok
24/90: iterativesparse                  Ok
25/90: lincg                            Ok
26/90: normestimator                    Ok
27/90: linlsqr                          Ok
28/90: linmin                           Ok
29/90: nleq                             Ok
30/90: matinv                           Ok
31/90: optserv                          Ok
32/90: minlbfgs                         Ok
33/90: cqmodels                         Ok
34/90: snnls                            Ok
35/90: sactivesets                      Ok
36/90: minbleic                         Ok
37/90: minqp                            Ok
38/90: minlm                            Ok
39/90: mincg                            Ok
40/90: minlp                            Ok
41/90: minnlc                           Ok
42/90: minns                            Ok
43/90: minbc                            Ok
44/90: nearestneighbor                  Ok
45/90: odesolver                        Ok
46/90: inverseupdate                    Ok
47/90: schur                            Ok
48/90: spdgevd                          Ok
49/90: gammafunc                        Ok
50/90: gq                               Ok
51/90: gkq                              Ok
52/90: autogk                           Ok
53/90: normaldistr                      Ok
54/90: basestat                         Ok
55/90: wsr                              Ok
56/90: mannwhitneyu                     Ok
57/90: stest                            Ok
58/90: studentttests                    Ok
59/90: ratint                           Ok
60/90: idw                              Ok
61/90: polint                           Ok
62/90: spline1d                         Ok
63/90: lsfit                            Ok
64/90: fitsphere                        Ok
65/90: parametric                       Ok
66/90: spline2d                         Ok
67/90: spline3d                         Ok
68/90: rbf                              Ok
69/90: fft                              Ok
70/90: fht                              Ok
71/90: conv                             Ok
72/90: corr                             Ok
73/90: chebyshev                        Ok
74/90: hermite                          Ok
75/90: legendre                         Ok
76/90: laguerre                         Ok
77/90: pca                              Ok
78/90: bdss                             Ok
79/90: mlpbase                          Ok
80/90: mlpe                             Ok
81/90: clustering                       Ok
82/90: dforest                          Ok
83/90: linreg                           Ok
84/90: filters                          Ok
85/90: ssa                              Ok
86/90: lda                              Ok
87/90: mcpd                             Ok
88/90: knn                              Ok
89/90: mlptrain                         Ok
90/90: alglibbasics                     Ok
Done in 81 seconds
