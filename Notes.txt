A4. ALGLIB++ Package Dependencies
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
AlgLibInternal:
	APSERV:
	ABLASF:
	HBLAS:
	CREFLECTIONS:
	SBLAS: APSERV
	ABLASMKL:
	SCODES:
	TSORT: APSERV
	BLAS:
	ROTATIONS:
	BASICSTATOPS: TSORT
	TRLINSOLVE:
	SAFESOLVE:
	XBLAS:
	LINMIN:
	NEARUNITYUNIT:
	NTHEORY:
	FTBASE: APSERV NTHEORY
	HPCCORES:
AlgLibMisc: AlgLibInternal
	HQRND: (AlgLibInternal) APSERV ABLASF
	XDEBUG:
	NEARESTNEIGHBOR: (AlgLibInternal) SCODES TSORT
DiffEquations: AlgLibInternal
	ODESOLVER: (AlgLibInternal) APSERV
FastTransforms: AlgLibInternal
	FFT: (AlgLibInternal) FTBASE
	FHT: FFT
	CONV: FFT
	CORR: CONV
SpecialFunctions: AlgLibMisc [AlgLibInternal]
	GAMMAFUNC:
	NORMALDISTR: (AlgLibMisc) HQRND
	IBETAF: GAMMAFUNC NORMALDISTR
	STUDENTTDISTR: IBETAF
	FDISTR: IBETAF
	IGAMMAF: GAMMAFUNC NORMALDISTR
	CHISQUAREDISTR: IGAMMAF
	BINOMIALDISTR: (AlgLibInternal) NEARUNITYUNIT │ IBETAF
	EXPINTEGRALS:
	JACOBIANELLIPTIC:
	TRIGINTEGRALS:
	CHEBYSHEV:
	POISSONDISTR: IGAMMAF
	BETAF: GAMMAFUNC
	FRESNEL:
	PSIF:
	AIRYF:
	DAWSON:
	HERMITE:
	LEGENDRE:
	BESSEL:
	LAGUERRE:
	ELLIPTIC:
LinAlg: AlgLibMisc [AlgLibInternal]
	ABLAS: (AlgLibInternal) APSERV ABLASF ABLASMKL
	ORTFAC: (AlgLibInternal) HBLAS CREFLECTIONS SBLAS │ (AlgLibMisc) HQRND │ ABLAS
	MATGEN: (AlgLibInternal) CREFLECTIONS │ (AlgLibMisc) HQRND │ ABLAS
	SPARSE: (AlgLibInternal) ABLASMKL SCODES TSORT │ (AlgLibMisc) HQRND
	HSSCHUR: (AlgLibInternal) BLAS ROTATIONS │ ABLAS
	EVD: (AlgLibInternal) BASICSTATOPS │ ORTFAC MATGEN SPARSE HSSCHUR
	DLU: ABLAS
	SPTRF: SPARSE DLU
	AMDORDERING: ABLAS SPARSE
	SPCHOL: AMDORDERING
	TRFAC: (AlgLibInternal) ROTATIONS │ MATGEN SPTRF SPCHOL
	BDSVD: (AlgLibInternal) ROTATIONS │ (AlgLibMisc) HQRND │ ABLAS
	SVD: (AlgLibInternal) BLAS │ ORTFAC BDSVD
	RCOND: (AlgLibInternal) TRLINSOLVE SAFESOLVE │ TRFAC
	FBLS: (AlgLibInternal) ROTATIONS │ ORTFAC
	NORMESTIMATOR: MATGEN SPARSE
	MATINV: RCOND
	INVERSEUPDATE:
	SCHUR: ORTFAC HSSCHUR
	SPDGEVD: EVD MATINV
	MATDET: TRFAC
Integration: LinAlg SpecialFunctions
	GQ: (SpecialFunctions) GAMMAFUNC │ (LinAlg) EVD
	GKQ: GQ
	AUTOGK: GKQ
Solvers: LinAlg [AlgLibInternal]
	POLYNOMIALSOLVER: (LinAlg) EVD TRFAC
	DIRECTDENSESOLVERS: (AlgLibInternal) XBLAS │ (LinAlg) SVD RCOND
	DIRECTSPARSESOLVERS: (LinAlg) TRFAC
	ITERATIVESPARSE: (LinAlg) FBLS │ DIRECTSPARSESOLVERS
	LINCG: (LinAlg) MATGEN SPARSE
	LINLSQR: (LinAlg) SVD NORMESTIMATOR
	NLEQ: (AlgLibInternal) LINMIN │ (LinAlg) FBLS
Statistics: LinAlg SpecialFunctions [AlgLibInternal AlgLibMisc]
	BASESTAT: (AlgLibInternal) BASICSTATOPS │ (LinAlg) ABLAS
	CORRELATIONTESTS: (SpecialFunctions) STUDENTTDISTR │ BASESTAT
	JARQUEBERA:
	VARIANCETESTS: (SpecialFunctions) FDISTR CHISQUAREDISTR
	WSR: (AlgLibInternal) APSERV
	MANNWHITNEYU: (AlgLibMisc) HQRND
	STEST: (SpecialFunctions) BINOMIALDISTR
	STUDENTTTESTS: (SpecialFunctions) STUDENTTDISTR
Optimization: Solvers [AlgLibInternal LinAlg]
	OPTGUARDAPI: (AlgLibInternal) APSERV
	OPTSERV: (LinAlg) SVD MATINV │ OPTGUARDAPI
	MINLBFGS: (AlgLibInternal) LINMIN │ (LinAlg) FBLS │ OPTSERV
	CQMODELS: (LinAlg) TRFAC FBLS
	LPQPSERV: (LinAlg) SPARSE
	SNNLS: (LinAlg) TRFAC FBLS
	SACTIVESETS: OPTSERV SNNLS
	QQPSOLVER: CQMODELS SACTIVESETS
	QPDENSEAULSOLVER: (Solvers) DIRECTDENSESOLVERS LINLSQR │ MINLBFGS LPQPSERV QQPSOLVER
	MINBLEIC: (AlgLibInternal) LINMIN │ CQMODELS SACTIVESETS
	QPBLEICSOLVER: MINBLEIC
	VIPMSOLVER: (Solvers) DIRECTDENSESOLVERS │ MINLBFGS CQMODELS LPQPSERV
	MINQP: QPDENSEAULSOLVER QPBLEICSOLVER VIPMSOLVER
	MINLM: MINQP
	MINCG: (AlgLibInternal) LINMIN │ OPTSERV
	NLCSQP: VIPMSOLVER
	LPQPPRESOLVE: (LinAlg) SPARSE
	REVISEDDUALSIMPLEX: (LinAlg) TRFAC │ LPQPPRESOLVE
	MINLP: VIPMSOLVER REVISEDDUALSIMPLEX
	NLCSLP: (AlgLibInternal) LINMIN │ OPTSERV REVISEDDUALSIMPLEX
	MINNLC: MINBLEIC NLCSQP NLCSLP
	MINNS: MINBLEIC
	MINCOMP: MINLBFGS MINBLEIC
	MINBC: (AlgLibInternal) LINMIN │ OPTSERV
	OPTS: MINLP
Interpolation: Integration Optimization [AlgLibInternal AlgLibMisc LinAlg Solvers]
	RATINT: (AlgLibInternal) TSORT
	IDW: (AlgLibMisc) HQRND NEARESTNEIGHBOR │ (LinAlg) ABLAS
	INTFITSERV: (LinAlg) TRFAC
	POLINT: RATINT
	SPLINE1D: (LinAlg) FBLS │ (Solvers) LINLSQR │ INTFITSERV
	LSFIT: (Optimization) MINLM │ POLINT SPLINE1D
	FITSPHERE: (Optimization) MINLM MINNLC
	PARAMETRIC: (Integration) AUTOGK │ SPLINE1D
	RBFV1: (AlgLibMisc) NEARESTNEIGHBOR │ LSFIT
	SPLINE2D: SPLINE1D
	RBFV2: (AlgLibMisc) NEARESTNEIGHBOR │ LSFIT
	SPLINE3D: SPLINE1D
	INTCOMP: SPLINE1D FITSPHERE
	RBF: RBFV1 RBFV2
DataAnalysis: Optimization [AlgLibInternal AlgLibMisc LinAlg Solvers SpecialFunctions]
	PCA: (LinAlg) EVD SVD │ (Statistics) BASESTAT
	BDSS: (Statistics) BASESTAT
	MLPBASE: (AlgLibInternal) HPCCORES │ (LinAlg) SPARSE │ BDSS
	MLPE: MLPBASE
	CLUSTERING: (AlgLibInternal) BLAS │ (AlgLibMisc) HQRND │ (Statistics) BASESTAT
	DFOREST: (AlgLibInternal) SCODES │ (AlgLibMisc) HQRND │ BDSS
	LINREG: (SpecialFunctions) IGAMMAF │ (LinAlg) SVD │ (Statistics) BASESTAT
	FILTERS: LINREG
	SSA: (LinAlg) EVD SVD
	LDA: (LinAlg) EVD MATINV
	MCPD: (Optimization) MINBLEIC
	LOGIT: (Solvers) DIRECTDENSESOLVERS │ MLPBASE
	KNN: (AlgLibMisc) HQRND NEARESTNEIGHBOR │ BDSS
	MLPTRAIN: (Solvers) DIRECTDENSESOLVERS │ (Optimization) MINLBFGS │ MLPE
	DATACOMP: CLUSTERING
TestC, TestI: DataAnalysis DiffEquations FastTransforms Interpolation
TestX: DataAnalysis Interpolation
TestZ: Interpolation
TestY: LinAlg

A5. ALGLIB Commercial and Free Versions: Notes
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
For those who wish to use the improvements provided by the Commercial version of ALGLIB,
the following is a list of the routines in ALGLIB that have been provided with enhancements there;
along with the corresponding notifications.

Multi-threading support for ALGLIB++, in place of that provided by the commercial version, is currently being developed.
In addition, some enhancements, which have been made available for the free edition of ALGLIB, are inherited by ALGLIB++.

There are 6 groups of routines (labeled A, B, C, D, E and F), based on which parts of which notifications apply to them.

A5.1. ALGLIB Commercial and Free Notifications
──────────────────────────────────────────────
ABCDEF	│ COMMERCIAL EDITION OF ALGLIB:
ABCDEF	│ 
AB――――	│ Commercial version of ALGLIB includes one important improvement of this function, which can be used from C++ and C#:
――CDEF	│ Commercial Edition of ALGLIB includes following important improvements of this function:
AB――――	│ ∙ Intel MKL support (lightweight Intel MKL is shipped with ALGLIB)
――CDEF	│ ∙ high-performance native backend with same C# interface (C# version)
―――DEF	│ ∙ multithreading support (C++ and C# versions)
――C―EF	│ ∙ hardware vendor (Intel) implementations of linear algebra primitives (C++ and C# versions, x86/x64 platform)
ABCDEF	│ 
AB――――	│ Intel MKL gives approximately constant (with respect to number of worker threads)
AB――――	│ acceleration factor which depends on CPU being used,
AB────	│ problem size and "baseline" ALGLIB edition which is used for comparison.
AB――――	│ 
A―――――	│ Generally, commercial ALGLIB is several times faster than open-source generic C edition,
A―――――	│ and many times faster than open-source C# edition.
A―――――	│ 
AB――――	│ Multithreaded acceleration is NOT supported for this function.
ABCDEF	│ 
ABCDEF	│ We recommend you to read 'Working with commercial version' section of ALGLIB Reference Manual
ABCDEF	│ in order to find out how to use performance-related features provided by commercial edition of ALGLIB.

―――――F	│ FREE EDITION OF ALGLIB:
―――――F	│
―――――F	│ Free Edition of ALGLIB supports following important features for this function:
―――――F	│ ∙ C++ version: x64 SIMD support using C++ intrinsics
―――――F	│ ∙ C# version: x64 SIMD support using NET5/NetCore hardware intrinsics
―――――F	│ We recommend you to read 'Compiling ALGLIB' section of the ALGLIB Reference Manual
―――――F	│ in order to find out how to activate SIMD support in ALGLIB.

A5.2. ALGLIB Commercial Support and Free Enhancements by Routine
────────────────────────────────────────────────────────────────
The routines, by group, are:
A:	rmatrixbdsvd,
B:	rmatrixschur,
C:	hmatrixevd, hmatrixtd, hmatrixtdunpackq,
	rmatrixbd, rmatrixbdmultiplybyq, rmatrixbdunpackq, rmatrixevd, rmatrixhessenberg, rmatrixhessenbergunpackq, rmatrixsvd,
	smatrixevd, smatrixevdr, smatrixtd, smatrixtdevd, smatrixtdunpackq,
D:	dfbuilderbuildrandomforest, idwbuildercreate, knnbuilderbuildknnmodel,
	mlpallerrorssparsesubset, mlpallerrorssubset,
	mlpavgce, mlpavgcesparse, mlpavgerror, mlpavgerrorsparse, mlpavgrelerror, mlpavgrelerrorsparse,
	mlpclserror, mlpcontinuetraining, mlperror, mlperrorsparse, mlperrorsparsesubset, mlperrorsubset,
	mlpgradbatch, mlpgradbatchsparse, mlpgradbatchsparsesubset, mlpgradbatchsubset,
	mlpkfoldcv, mlprelclserror, mlprelclserrorsparse, mlprmserror, mlprmserrorsparse, mlptrainensemblees, mlptrainnetwork,
	rankdata, rankdatacentered,
	rbfgridcalc2v, rbfgridcalc2vsubset, rbfgridcalc3v, rbfgridcalc3vsubset,
E:	covm2, covm, pearsoncorrm2, pearsoncorrm, spearmancorrm2, spearmancorrm,
spline2dbuildercreate, spline2dbuildersetalgoblocklls, spline2dbuildersetalgofastddm, spline2dfit,
F:	barycentricfitfloaterhormann, barycentricfitfloaterhormannwc,
	clusterizergetdistances, clusterizerrunahc, clusterizerrunkmeans,
	cmatrixgemm, cmatrixherk, cmatrixinverse, cmatrixlefttrsm, cmatrixlq, cmatrixlqunpackq,
	cmatrixlu, cmatrixluinverse, cmatrixlusolvem, cmatrixlusolvemfast, cmatrixqr, cmatrixqrunpackq,
	cmatrixrighttrsm, cmatrixsolve, cmatrixsolvefast, cmatrixsolvem, cmatrixsolvemfast, cmatrixtrinverse,
	eigsubspacesolvedenses,
	fisherlda, fisherldan,
	hpdmatrixcholesky, hpdmatrixcholeskyinverse, hpdmatrixinverse, hpdmatrixsolve, hpdmatrixsolvefast, hpdmatrixsolvem, hpdmatrixsolvemfast,
	lsfitlinearc, lsfitlinear, lsfitlinearwc, lsfitlinearw,
	pcabuildbasis, pcatruncatedsubspace, pcatruncatedsubspacesparse,
	polynomialfit, polynomialfitwc,
	rmatrixgemm, rmatrixinverse, rmatrixlefttrsm, rmatrixlq, rmatrixlqunpackq,
	rmatrixlu, rmatrixluinverse, rmatrixlusolvem, rmatrixlusolvemfast, rmatrixqr, rmatrixqrunpackq, rmatrixrighttrsm,
	rmatrixsolve, rmatrixsolvefast, rmatrixsolvels, rmatrixsolvem, rmatrixsolvemfast, rmatrixsyrk, rmatrixtrinverse,
	spdmatrixcholesky, spdmatrixcholeskyinverse, spdmatrixinverse, spdmatrixsolve, spdmatrixsolvefast, spdmatrixsolvem, spdmatrixsolvemfast,
	spline1dfitcubic, spline1dfitcubicwc, spline1dfithermite, spline1dfithermitewc

A6. ALGLIB ⇒ ALGLIB++ Revision Sequence
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
A6.1. Revision Notes
────────────────────
For performance reasons, functions may be implemented with slight differences from how they are documented.
In particular, while output parameters are documented and declared and implemented as (Type &Par),
input parameters are documented as (Type Par), but declared and implemented
as (const Type Par) for the scalar types (bool), (ae_int_t), (double) and (complex),
and as (const Type &amp;Par) for all other types.
This is discussed in greater depth by Stroustrup et al. (https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-in) in-parameter passing with constant references.
For user-supplied functions in the iteration routines and their high-level versions, however, the prototypes actually required are made explicit.
For both these routines as well as for the serializer/unserializer routines, the documented and declared/implemented versions match.

Other exceptions include array parameters, which are documented as (Type &), but declared as (const Type &), as indicated below:
	rankdatacentered(∙,_,_);
	rankdata(∙,_,_);
	xdebugb1not(∙);
	xdebugb2not(∙);
	xdebugc1neg(∙);
	xdebugc2neg(∙);
	xdebugi1neg(∙);
	xdebugi2neg(∙);
	xdebugr1neg(∙);
	xdebugr2neg(∙);
	rvectorcopy(_,_,_,∙,_);
	rmatrixcopy(_,_,_,_,_,∙,_,_);
	rmatrixgencopy(_,_,_,_,_,_,_,∙,_,_);
	rmatrixgemv(_,_,_,_,_,_,_,_,_,_,∙,_);
	sparsegemv(_,_,_,_,_,_,∙,_);
	rmatrixmv(_,_,_,_,_,_,_,_,∙,_);
	rmatrixsymv(_,_,_,_,_,_,_,_,_,∙,_);
	rmatrixsyvmv(_,_,_,_,_,_,_,∙);
	sparsetrmv(_,_,_,_,∙,_);
	rmatrixger(_,_,∙,_,_,_,_,_,_,_);
	rmatrixtranspose(_,_,_,_,_,∙,_,_);
	rmatrixtrsv(_,_,_,_,_,_,_,∙,_);
	sparsetrsv(_,_,_,_,∙);
	rmatrixenforcesymmetricity(∙,_,_);
	rmatrixgemm(_,_,_,_,_,_,_,_,_,_,_,_,_,∙,_,_);
	cmatrixgemm(_,_,_,_,_,_,_,_,_,_,_,_,_,∙,_,_);
	rmatrixsyrk(_,_,_,_,_,_,_,_,∙,_,_,_);
	cmatrixsyrk(_,_,_,_,_,_,_,_,∙,_,_,_);
	cmatrixherk(_,_,_,_,_,_,_,_,∙,_,_,_);
	rmatrixlefttrsm(_,_,_,_,_,_,_,_,∙,_,_);
	cmatrixlefttrsm(_,_,_,_,_,_,_,_,∙,_,_);
	rmatrixlusolvefast(_,_,_,∙,_);
	cmatrixlusolvefast(_,_,_,∙,_);
	spdmatrixcholeskysolvefast(_,_,_,∙,_);
	hpdmatrixcholeskysolvefast(_,_,_,∙,_);
	rmatrixlusolvemfast(_,_,_,∙,_,_);
	cmatrixlusolvemfast(_,_,_,∙,_,_);
	spdmatrixcholeskysolvemfast(_,_,_,∙,_,_);
	hpdmatrixcholeskysolvemfast(_,_,_,∙,_,_);
	rmatrixrighttrsm(_,_,_,_,_,_,_,_,∙,_,_);
	cmatrixrighttrsm(_,_,_,_,_,_,_,_,∙,_,_);
	rmatrixsolvefast(_,_,∙,_);
	cmatrixsolvefast(_,_,∙,_);
	spdmatrixsolvefast(_,_,_,∙,_);
	hpdmatrixsolvefast(_,_,_,∙,_);
	rmatrixsolvemfast(_,_,∙,_,_);
	cmatrixsolvemfast(_,_,∙,_,_);
	spdmatrixsolvemfast(_,_,_,∙,_,_);
	hpdmatrixsolvemfast(_,_,_,∙,_,_);
	spdmatrixcholeskyupdateadd1buf(∙,_,_,_,_);
	spdmatrixcholeskyupdateadd1(∙,_,_,_);
	spdmatrixcholeskyupdatefixbuf(∙,_,_,_,_);
	spdmatrixcholeskyupdatefix(∙,_,_,_);

A6.2. Test Stages
─────────────────
39	Integration of version 3.18.0 ― being done separately from the main branch.
39	Removed the CPU initialization for FP-rounding (more recent versions of GCC now seem to handle this right).
39	Removed hook-stub routines:
	―	trypexec from DataAnalysis, Interpolation, LinAlg, Statistics,
	―	notes are kept on the parallelism hooks.
39	Topologically sorted all the functions: both static and external, except *alloc(), [un]serialize(), *_{init,copy,free}().
39	Ap.{cpp,h}: Normalized translator-generated names across namespaces:
		ae_machineepsilon → machineepsilon, ae_pi → pi, ae_maxrealnumber → maxrealnumber, ae_minrealnumber → minrealnumber,
		ae_c_abs → abscomplex, ae_complex → complex, ae_c_conj → conj, ae_c_sqr → csqr, ae_sign → sign, ae_sqr → sqr,
		ae_iceil → iceil, ae_ifloor → ifloor, ae_round → iround, ae_trunc → itrunc,
		ae_maxreal → maxreal, ae_minreal → minreal, ae_maxint → maxint, ae_minint → minint,
		ae_get_cores_to_use → getnworkers, ae_set_cores_to_use → setnworkers, ae_set_error_flag → set_error_flag,
		ae_randommid → randommid, ae_randomreal → randomreal, ae_randombool → randombool, ae_randominteger → randominteger,
		ae_tickcount → tickcount,
		ae_complex_from_i → complex_from_i, ae_complex_from_d → complex_from_d
39	Removed pi() from Ap.{cpp,h} (since it's already defined in Ap.h as a constant, ‟pi”).
39	Synthesized the local ‟gateway” alglib_impl::complex → alglib::complex function complex_from_c() in Ap.cpp.
	Generalized existing routines: complex_from_{d,i}(⋯) from (X) to (X, Y = 0.0).
	Synthesized complex::complex(⋯) and complex_from_{d,i,c}(⋯) for Y ≠ 0.0.
39	Move diagnostic functions to TestC.cpp and remove their declarations:
	―	seterrordiff() from AlgLibInternal.{cpp,h}
	―	set_error_flag(), ae_get_last_error_file(), ae_get_last_error_line(), ae_get_last_error_xdesc() from Ap.{cpp,h}

	−	sef_file, sef_line, sef_xdesc from Ap.cpp
	―	Eliminate the ae_get_last_error_*() functions and replace them by the corresponding sef_* variables.
39	Remove all comments on, references to and support for tracing/logging added in 3.16:
	―	Ap.{cpp,h}:
			ae_trace_file(), ae_trace_disable(), ae_is_trace_enabled(), ae_trace()
	―	AlgLibInternal.{cpp,h}:
			tracevectorautoprec(), tracevectorunscaledunshiftedautoprec(), tracerownrm1autoprec(),
			tracevectore6(), tracevectore615(), tracerownrm1e6()
	―	Optimization.{cpp,h}:
		3.15: The *trace* routines were stubs and were removed.
		3.16: The *trace* routines, dotrace*, doprobing were activated for the IPM, SLP and SQP solvers.
		3.17: The tracegamma vector and extendeddebug and dotimers flags & members and rep*time members are also removed.
	―	Optimization.cpp, Manual.htm:
			TRACING * SOLVER comments
39	Optimized ifloor(A,B) as A / B and iceil(A,B) as (A + B - 1) / B, for integer types A and B.
	Replaced i{floor,ceil,trunc,round}() by std::{floor,ceil,trunc,round}(), for floating point types.
39	Synthesized increment operators:
	―	*X = *X + 1 ⇒ ++*X, else X = X + 1 ⇒ X++ for non-pointers.
	―	*X = *X - 1 ⇒ --*X, else X = X - 1 ⇒ X-- for non-pointers.
	―	X = X + 1.0 ⇒ X++;
39	Synthesized update operators:
	―	X = X % Y ⇒ X %= Y (*)
	―	X = X & Y ⇒ X &= Y
	―	X = X + Y ⇒ X += Y
	―	X = Y + X ⇒ X += Y
	―	X = Y + (X) ⇒ X += Y
	―	X = X - Y ⇒ X -= Y, where Y is a monomial.
	―	X = X - Y ± Y' ± ⋯ ± Y" ⇒ X -= Y ∓ Y' ∓ ⋯ ∓ Y", where Y, Y', ⋯, Y" are monomials. (‡)
	―	X = X * Y ⇒ X *= Y, X = -X * Y ⇒ X *= -Y, X = Z * X ⇒ X *= Z, X = Z * X * Y ⇒ X *= Z * Y, where Y and Z are monomials.
	―	X = X / Y ⇒ X /= Y, where Y is a single factor.
	―	X = X * Y / Z ⇒ X *= Y / Z, in some cases, where X, Y and Z are floating point.
	(*) This was previous already done in its sole occurrence: in hqrnduniformi() in AlgLibMisc.cpp.
	(‡) X = X - Y + Y' - Y" is specially optimized, since its occurrences all involved *max(⋯,⋯) on the right-hand side.
39	Partial recoding of Ap.{cpp,h} to bring it in line with ALGLIB++:
	―	The declarations of ae_vector_wrapper::ae_vector_wrapper() and ae_vector_wrapper::operator=() in Ap.h were removed - unused.
	―	The declarations of ae_matrix_wrapper::ae_matrix_wrapper() and ae_matrix_wrapper::operator=() in Ap.h were removed - unused.
	―	*_free(⋯, true) changed to *_free(⋯, false) in:
		ae_vector_wrapper::~ae_{vector,matrix}_wrapper(), ae_vector_wrapper::attach_to(),
		ae_matrix_wrapper::~ae_{vector,matrix}_wrapper(), ae_matrix_wrapper::attach_to().
	―	In the original implementaton of ALGLIB *_clear() (= *_free(, true)) should have been *_destroy (= *_free(, false))
		in each of these routines.
		Both are equivalent in the GPL version of ALGLIB, because *_clear() and *_destroy() were the same for ae_{vector,matrix},
		but this is only an incidental equivalence that should not be relied on.
	―	Synthesized the function alglib::set_error_msg() in Ap.cpp and redefined ThrowErrorMsg() in Ap.h, using it.
	―	Remade the enum { OWN_CALLER = false, OWN_AE = true } type as bool and removed the enumerated constants.
	―	In-line some of the alglib:: object member functions in Ap.h, removing them from Ap.cpp.
		―	alglib::ae_vector_wrapper::c_ptr(), ae_matrix_wrapper::c_ptr()
		―	c_ptr() for object classes, moved from DefClass to DecClass.
		―	alglib::complex constructors.
	―	Added declarations of the global routines in Ap.cpp
			_ialglib_pack_n2(), _ialglib_mm22(), _ialglib_mm22x2()
		into Ap.h, alongside those of the other _ialglib_*() routines.

A6.3. Test Results
──────────────────
39	7519 1.0x 12049 1.0x 11909 1.0x 9587 1.0x 1635369021 (6179c03d) 83
39	7874 1.0x 12196 1.0x 11909 1.0x 9266 1.0x 1635374188 (6179d46c) 87
39	7937 1.0x 12196 1.0x 12199 1.0x 9138 1.0x 1635377026 (6179df82) 86
39	7874 1.0x 12196 1.0x 12199 1.0x 8792 1.1x 1635383008 (6179f6e0) 84
39	7752 1.0x 12049 1.0x 11769 1.0x 9037 1.0x 1635461545 (617b29a9) 85
39	7874 0.9x 10310 1.1x 12199 1.0x 9635 1.0x 1635576384 (617cea40) 86
39	6712 1.2x 12347 1.0x 12052 0.9x 9104 1.0x 1637111328 (61945620) 91
39	7813 0.9x 11629 0.9x  9527 1.0x 9296 1.0x 1637355701 (619810b5) 88
39	7813 1.0x 12196 1.0x 12199 1.0x 9023 1.1x 1637444986 (61996d7a) 87
39	6452 1.2x 12501 1.0x 12052 1.0x 9641 1.0x 1637823278 (619f332e) 87
39	6849 1.1x 12501 0.9x 12199 1.0x 9327 1.0x 1638487069 (61a9541d) 88
39	7692 1.0x 12196 1.0x 12199 1.0x 9061 1.0x 1638699590 (61ac9246) 88
39	7874 1.0x 12196 1.0x 12199 1.0x 8774 1.1x 1638841044 (61aebad4) 90
39	7874 1.0x 12347 0.9x 11769 1.0x 9523 1.0x 1638850198 (61aede96) 89
39	7874 1.0x 12049 1.0x 12199 1.0x 9227 1.0x 1638953198 (61b070ee) 87
39	7752 1.0x 12049 1.0x 12052 1.0x 9327 1.0x 1638958917 (61b08745) 84
39	7634 1.0x 11906 1.0x 11115 1.1x 8792 1.0x 1639431222 (61b7bc36) 83
39	7874 1.0x 11766 1.0x 12199 1.0x 9476 1.0x 1639513145 (61b8fc39) 84 // TRFAC failed in TestC.
39	7874 1.0x 12049 1.0x 10104 1.1x 9367 1.0x 1639516272 (61b90870) 82 // Corrected.
39	7463 0.8x 11629 1.0x 11769 1.0x 8752 1.0x 1641874215 (61dd0327) 87 // Re-sorted the routines.
39	7937 1.0x 12196 1.0x 12052 1.0x 9544 1.0x 1642926906 (61ed133a) 85 // Real to Complex conversion generalized.
39	6410 0.9x 10310 1.1x 10313 1.0x 9539 1.0x 1642933377 (61ed2c81) 83 // Removed all trace-related functionality.
39	7353 1.0x 11365 1.0x 11368 1.0x 9241 1.0x 1643002115 (61ee3903) 82 // Synthesize the ++ and -- operators.
39	7937 1.0x 12347 0.9x 12199 1.0x 9513 1.0x 1643154969 (61f08e19) 84 // Synthesize the {+,-,*,/,%,&}= operators.
39	8000 1.0x 12501 1.0x 12199 1.0x 9100 1.0x 1643326894 (61f32dae) 80 // Synthesize in-line operators & set_error_msg(), etc.

A6.4. The Most Recent Test Run
──────────────────────────────
echo "TestI: API Interface"
TestI: API Interface
./TestI
CPUID: sse2 avx2 fma
OS: POSIX
C++ tests. Please wait...
Allocation counter activated...
0/151
50/151
100/151
150/151
151/151
Allocation counter checked... OK
echo "TestY: C++ Wrapper Test"
TestY: C++ Wrapper Test
./TestY
echo "TestZ: Exception-Free Wrapper Test"
TestZ: Exception-Free Wrapper Test
./TestZ
Test exception-free error handling:
Allocation counter activated...
* default flag value          OK
* 1D arrays                   OK
* 2D arrays                   OK
* ALGLIB objects              OK
* ALGLIB functions            OK
Allocation counter checked... OK
echo "TestX: Speed and Consistency"
TestX: Speed and Consistency
./TestX
System:
* cores count                  1
Allocation counter activated...
Basic functions:
* 1D arrays                   OK
* 2D arrays                   OK
* CSV support                 OK
* Serialization (kd-tree)     OK
* Serialization (RBF)         OK
* Progress/termination (RBF)  OK
* Exceptions in constructors  OK
SMP settings vs GEMM speedup:
* test skipped (no SMP)       ??
Issues:
* issue 505                   OK
* issue 478                   OK
* issue 528                   OK
* issue 591                   OK
* issue 594                   OK
* issue 764                   OK
* issue 813                   OK
* issue 824                   OK
Performance:
* RGEMM-SEQ-16   (MFLOPS)   8000
* RGEMM-MTN-16              1.0x
* RGEMM-SEQ-32   (MFLOPS)  12501
* RGEMM-MTN-32              1.0x
* RGEMM-SEQ-64   (MFLOPS)  12199
* RGEMM-MTN-64              1.0x
* RGEMM-SEQ-1024 (MFLOPS)   9100
* RGEMM-MTN-1024            1.0x
Allocation counter checked... Ok
echo "TestC: Internal Routines"
TestC: Internal Routines
./TestC
SEED: 1643326894
COMPILER: GCC
HARDWARE: 64-bit
HARDWARE: little-endian
CPU:   Intel
CORES: 1 (serial version)
LIBS:  
CPUID: sse2 avx2 fma
OS: POSIX
TESTING MODE: single core
ablasf                           OK
hqrnd                            OK
ablas                            OK
hblas                            OK
creflections                     OK
sblas                            OK
ortfac                           OK
matgen                           OK
tsort                            OK
sparse                           OK
blas                             OK
evd                              OK
trfac                            OK
polynomialsolver                 OK
bdsvd                            OK
svd                              OK
trlinsolve                       OK
safesolve                        OK
rcond                            OK
xblas                            OK
directdensesolvers               OK
directsparsesolvers              OK
fbls                             OK
iterativesparse                  OK
lincg                            OK
normestimator                    OK
linlsqr                          OK
linmin                           OK
nleq                             OK
matinv                           OK
optserv                          OK
minlbfgs                         OK
cqmodels                         OK
snnls                            OK
sactivesets                      OK
minbleic                         OK
minqp                            OK
minlm                            OK
mincg                            OK
minlp                            OK
minnlc                           OK
minns                            OK
minbc                            OK
nearestneighbor                  OK
odesolver                        OK
inverseupdate                    OK
schur                            OK
spdgevd                          OK
gammafunc                        OK
gq                               OK
gkq                              OK
autogk                           OK
normaldistr                      OK
basestat                         OK
wsr                              OK
mannwhitneyu                     OK
stest                            OK
studentttests                    OK
ratint                           OK
idw                              OK
polint                           OK
spline1d                         OK
lsfit                            OK
fitsphere                        OK
parametric                       OK
spline2d                         OK
spline3d                         OK
rbf                              OK
fft                              OK
fht                              OK
conv                             OK
corr                             OK
chebyshev                        OK
hermite                          OK
legendre                         OK
laguerre                         OK
pca                              OK
bdss                             OK
mlpbase                          OK
mlpe                             OK
clustering                       OK
dforest                          OK
linreg                           OK
filters                          OK
ssa                              OK
lda                              OK
mcpd                             OK
knn                              OK
mlptrain                         OK
alglibbasics                     OK
Done in 80 seconds
