// Manual threading event flags:
typedef enum {
// ∙	Exit, Step (generic/default)
   EV_EXIT, EV_STEP,
// ∙	needdy
   EV_NEEDDY = EV_STEP,
// ∙ 	needpfgh, needpfg, needpf (⇔ needfgh, needfg, needf)
   EV_NEEDPF = EV_STEP, EV_NEEDPFG, EV_NEEDPFGH,
// ∙	needfgh, needfg, needfij, needfi, needf
   EV_NEEDF = EV_STEP, EV_NEEDFG, EV_NEEDFGH, EV_NEEDFI, EV_NEEDFIJ,
// ∙	needprev, needmv, needmtv, needvmv[, needmv2]
   EV_NEEDPREV, EV_NEEDMV, EV_NEEDMTV, EV_NEEDVMV,/* EV_NEEDMV2,*/
// ∙	xupdated, lsstart, lsend, algpowerup
   EV_XUPDATED, EV_LSSTART, EV_LSEND, EV_ALGPOWERUP
} ae_event_t;

Manual threading interfaces:
AlgLibInternal.cpp:
	armijoiteration():
		armijostate Q;
		(Step: needf):	Anything
	mcsrch():
		(Step: Q->diffstep == 0.0? needfg: needf):		Anything
DataAnalysis.cpp
│	mlpcontinuetraining():	[Calls mlptrain_mlpcontinuetrainingx() but does not, itself, iterate.]
│		mlptrainer Q; multilayerperceptron Net;
│		(Step):		Anything
	static mlptrain_mlpcontinuetrainingx():
		mlptrainer Q; smlptrnsession SQ;
		(Step):		Anything
	static logit_mnlmcstep():
		(Step: needfg):	Anything
DiffEquations.cpp:
	odesolveriteration():
		odesolverstate Q;
		(Step: needdy):	void (*G)(const real_1d_array &Y, double X, real_1d_array dY, void *P);
				G(Q.y, Q.x, Q.dy, P);
Integration.cpp:
	autogkiteration():
		autogkstate Q;
		(Step: needf):	void (*F)(double X, double AtoX, double XtoB, double &Y, void *P);
				F(Q.x, Q.xminusa, Q.bminusx, Q.f, P);
	static autogk_autogkinternaliteration():
		autogkinternalstate Q;
		(Step: needf):	void (*F)(double X, double &Y);
Interpolation.cpp:
	lsfititeration():
		lsfitstate Q;
		Q.needpf:	void (*F)(const real_1d_array &C, const real_1d_array &X, double &Y, void *P);
				F(Q.c, Q.x, Q.f, P)
		Q.needpfg:	void (*dF)(const real_1d_array &C, const real_1d_array &X, double &Y, real_1d_array &dY, void *P);
				dF(Q.c, Q.x, Q.f, Q.g, P)
		Q.needpfgh:	void (*ddF)(const real_1d_array &C, const real_1d_array &X, double &Y, real_1d_array &dY, real_2d_array &ddY, void *P);
				ddF(Q.c, Q.x, Q.f, Q.g, Q.h, P)
		Q.xupdated:	void (*Rep)(const real_1d_array &C, double Y, void *P), void *P);
				if (Rep != NULL) Rep(Q.c, Q.f, P)
LinAlg.cpp:
	fblscgiteration():
		fblslincgstate Q;
		(Step):		Anything
	normestimatoriteration():
		normestimatorstate Q;
		Q.needmv:	Q.mv = <A, Q.x>
		Q.needmtv:	Q.mtv = <A, Q.x>
	eigsubspaceooccontinue();
		(Step):		Anything
	eigsubspaceiteration();
		(Step):		Anything
	static rcond_rmatrixestimatenorm():
		(Step):		Anything
	static rcond_cmatrixestimatenorm():
		(Step):		Anything
Optimization.cpp:
	smoothnessmonitorcheckgradientatx0(): [needfij Redundant]
		smoothnessmonitor Q;
		(needfij)	[minlbfgsiteration(), minbleiciteration(), minnlciteration(), minbciteration(), mincgiteration(), minlmiteration()]
	mincgiteration(): <smoothnessmonitorcheckgradientatx0()> 
		mincgstate Q;
		Q.lsstart:	if (drep) ...
		Q.lsend:	if (drep) ...
		Q.algpowerup:	if (drep) ...
		Q.needf:	void (*F)(const real_1d_array &X, double &Y, void *P);
				F(Q.x, Q.f, P);
		Q.needfg:	void (*dF)(const real_1d_array &X, double &Y, real_1d_array &dY, void *P);
				dF(Q.x, Q.f, Q.g, P);
		Q.xupdated:	void (*Rep)(const real_1d_array &X, double Y, void *P);
				if (Rep != NULL) Rep(Q.x, Q.f, P);
	minbleiciteration(): <smoothnessmonitorcheckgradientatx0()> 
		minbleicstate Q;
		Q.lsstart:	if (drep) ...
		Q.needf:	void (*F)(const real_1d_array &X, double &Y, void *P);
				F(Q.x, Q.f, P);
		Q.needfg:	void (*dF)(const real_1d_array &X, double &Y, real_1d_array &dY, void *P);
				dF(Q.x, Q.f, Q.g, P);
		Q.xupdated:	void (*Rep)(const real_1d_array &X, double Y, void *P);
				if (Rep != NULL) Rep(Q.x, Q.f, P);
	minlbfgsiteration(): <smoothnessmonitorcheckgradientatx0()> 
		minlbfgsstate Q;
		Q.needf:	void (*F)(const real_1d_array &X, double &Y, void *P);
				F(Q.x, Q.f, P);
		Q.needfg:	void (*dF)(const real_1d_array &X, double &Y, real_1d_array &dY, void *P);
				dF(Q.x, Q.f, Q.g, P);
		Q.xupdated:	void (*Rep)(const real_1d_array &X, double Y, void *P);
				if (Rep != NULL) Rep(Q.x, Q.f, P);
	static minlm_minlmstepfinderiteration():
		minlmstepfinder Q;
		Q.needfi:	[minlmiteration()]
		Q.needf:	[minlmiteration()]
	minlmiteration(): <minlm_minlmstepfinderiteration(), smoothnessmonitorcheckgradientatx0()> 
		minlmstate Q;
		Q.needf:	void (*F)(const real_1d_array &X, double &Y, void *P);
				F(Q.x, Q.f, P);
		Q.needfg:	void (*dF)(const real_1d_array &X, double &Y, real_1d_array &dY, void *P);
		(Never used)	dF(Q.x, Q.f, Q.g, P);
		Q.needfgh:	void (*ddF)(const real_1d_array &X, double &Y, real_1d_array &dY, real_2d_array &ddY, void *P);
				ddF(Q.x, Q.f, Q.g, Q.h, P);
		Q.needfi:	void (*Fv)(const real_1d_array &X, real_1d_array &Yv, void *P);
				Fv(Q.x, Q.fi, P);
		Q.needfij:	void (*dFv)(const real_1d_array &X, real_1d_array &Yv, real_2d_array &dYv, void *P);
				dFv(Q.x, Q.fi, Q.j, P);
		Q.xupdated:	void (*Rep)(const real_1d_array &X, double Y, void *P);
				if (Rep != NULL) Rep(Q.x, Q.f, P);
	minasaiteration():
		minasastate Q;
		Q.needfg:	void (*dF)(const real_1d_array &X, double &Y, real_1d_array &dY, void *P);
				dF(Q.x, Q.f, Q.g, P);
		Q.xupdated:	void (*Rep)(const real_1d_array &X, double Y, void *P);
				if (Rep != NULL) Rep(Q.x, Q.f, P);
	smoothnessmonitorprobe():
		smoothnessmonitor Q;
		(Step)		[nlcsqp_meritphaseiteration(), nlcslp_phase13iteration(), nlcslp_phase2iteration()]
	static nlcsqp_meritphaseiteration()
		minsqpstate Q;
		Q.needfij:	[minsqpiteration()]
		Q.xupdated:	[minsqpiteration()]
	minsqpiteration(): <nlcsqp_meritphaseiteration()>
		minsqpstate Q;
		Q.needfij:	[minnlciteration()]
		Q.xupdated:	[minnlciteration()]
	static nlcslp_phase13iteration():
		Q.xupdated	[minslpiteration()]
	static nlcslp_phase2iteration():
		minslpstate Q;
		Q.needfij:	[minslpiteration()]
		Q.xupdated	[minslpiteration()]
	minslpiteration(): <nlcslp_phase13iteration(), nlcslp_phase2iteration()>
		minslpstate Q;
		Q.needfij:	[minnlciteration()]
		Q.xupdated:	[minnlciteration()]
	static minnlc_auliteration():
		minnlcstate Q;
		Q.needfij:	[minnlciteration()]
		Q.xupdated:	[minnlciteration()]
	minnlciteration(): [minnlc_auliteration()] <minslpiteration(), minsqpiteration(), smoothnessmonitorcheckgradientatx0()> 
		minnlcstate Q;
		Q.needfi:	void (*Fv)(const real_1d_array &X, real_1d_array &Yv, void *P);
				Fv(Q.x, Q.fi, P);
		Q.needfij:	void (*dFv)(const real_1d_array &X, real_1d_array &Yv, real_2d_array &dYv, void *P);
				dFv(Q.x, Q.fi, Q.j, P);
		Q.xupdated:	void (*Rep)(const real_1d_array &X, double Y, void *P);
				if (Rep != NULL) Rep(Q.x, Q.f, P);
	static minns_agsiteration():
		minnsstate Q;
		Q.needfi:	[minnsiteration()]
		Q.needfij:	[minnsiteration()]
		Q.xupdated:	[minnsiteration()]
	minnsiteration(): <minns_agsiteration()>
		minnsstate Q;
		Q.needfi:	void (*Fv)(const real_1d_array &X, real_1d_array &Yv, void *P);
				Fv(Q.x, Q.fi, P)
		Q.needfij:	void (*dFv)(const real_1d_array &X, real_1d_array &Yv, real_2d_array &dYv, void *P);
				dFv(Q.x, Q.fi, Q.j, P)
		Q.xupdated:	void (*Rep)(const real_1d_array &X, double Y, void *P);
				if (Rep != NULL) Rep(Q.x, Q.f, P);
	minbciteration(): <smoothnessmonitorcheckgradientatx0()> 
		minbcstate Q;
		Q.needfg:	void (*dF)(const real_1d_array &X, double &Y, real_1d_array &dY, void *P);
				dF(Q.x, Q.f, Q.g, P);
		Q.needf:	void (*F)(const real_1d_array &X, double &Y, void *P);
				F(Q.x, Q.f, P);
		Q.xupdated:	void (*Rep)(const real_1d_array &X, double Y, void *P);
				if (Rep != NULL) Rep(Q.x, Q.f, P);
Solvers.cpp:
	linlsqriteration():
		linlsqrstate Q;
		Q.needmv:	Q.mv = Mv(A, Q.tmpx, Q.tmpd, Q.x)
		Q.needmtv:	Q.mtv = Mtv(A, Q.tmpd, Q.x)
		Q.xupdated:	void (*Rep)(const real_1d_array &X, double R2);
				if (Rep != NULL) Rep(Q.x, Q.r2)
	nleqiteration():
		nleqstate Q;
		Q.needf:	void (*F)(const real_1d_array &X, double &Y, void *P);
				F(Q.x, Q.f, P);
		Q.needfij:	void (*dFv)(const real_1d_array &X, real_1d_array &Yv, real_2d_array &dYv, void *P);
				dFv(Q.x, Q.fi, Q.j, P);
		Q.xupdated:	void (*Rep)(const real_1d_array &X, double Y, void *P);
				if (Rep != NULL) Rep(Q.x, Q.f, P);
	lincgiteration():
		lincgstate Q;
		Q.needmv:	Q.mv = <A, Q.x>
		Q.needvmv:	Q.vmv = <Q.mv, Q.x>
		Q.xupdated:	void (*Rep)(const real_1d_array &X);
				if (Rep != NULL) Rep(Q.x)
		Q.needprec:	Q.pv = Prec(Q.x)
TestC.cpp:
	testsparseunit_generatenext():
		sparsegenerator Q:
		(Step):		Anything
